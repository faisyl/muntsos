<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GPIO-ONC-RPC-Lib</name>
    </assembly>
    <members>
        <member name="T:GPIO.Direction">
            <summary>
            This enumeration type encapsulates GPIO data direction configuration values.
            </summary>
        </member>
        <member name="F:GPIO.Direction.Input">
            <summary>
            Configure GPIO pin data direction as input.
            </summary>
        </member>
        <member name="F:GPIO.Direction.Output">
            <summary>
            Configure GPIO pin data direction as output.
            </summary>
        </member>
        <member name="T:GPIO.Exception">
            <summary>
            This exception will be raised upon any error encountered while communicating with the ONC/RPC server.
            </summary>
        </member>
        <member name="M:GPIO.Exception.#ctor">
            <summary>
            Default constructor without parameters.
            </summary>
        </member>
        <member name="M:GPIO.Exception.#ctor(System.String)">
            <summary>
            Constructor including an error message string
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:GPIO.Server">
            <summary>
            This class encapsulates a connection to a single MuntsOS ONC/RPC GPIO server.
            </summary>
        </member>
        <member name="M:GPIO.Server.#ctor(System.String)">
            <summary>
            Open a connection to a ONC/RPC GPIO server.
            </summary>
            <param name="servername">Server domain name or IP address.</param>
        </member>
        <member name="M:GPIO.Server.OpenPin(System.Int32,GPIO.Direction,System.Boolean)">
            <summary>
            This factory method configures the specified GPIO pin and returns a Pin object for it.
            </summary>
            <param name="number">GPIO pin number.</param>
            <param name="direction">GPIO pin direction, GPIO.Direction.Input or GPIO.Direction.Output.</param>
            <param name="state">GPIO output pin initial state, true or false.  Ignored for input pin.</param>
            <returns>Returns a configured GPIO Pin object.</returns>
        </member>
        <member name="T:GPIO.Pin">
            <summary>
            This class encapsulates a single GPIO pin.
            </summary>
        </member>
        <member name="M:GPIO.Pin.#ctor(gpio_server_oncrpcClient,System.Int32)">
            <summary>
            GPIO pin object constructor.
            </summary>
            <param name="server">ONC/RPC server handle.</param>
            <param name="number">GPIO pin number.</param>
            <remarks>
            Do not call this constructor directly; use the Server.OpenPin() factory method instead.
            </remarks>
        </member>
        <member name="M:GPIO.Pin.Finalize">
            <summary>
            Pin object destructor
            </summary>
        </member>
        <member name="P:GPIO.Pin.state">
            <summary>
            This read/write property reflects the state of the GPIO pin.
            </summary>
            <value>
            Allowed values are true or false.
            </value>
            <remarks>
            Writing to a pin configured for input has no effect.
            </remarks>
        </member>
        <member name="T:gpio_server_oncrpc">
            A collection of constants used by the "gpio_server_oncrpc" ONC/RPC program.
        </member>
        <member name="T:gpio_server_oncrpcClient">
            The class <code>gpio_server_oncrpcClient</code> implements the client stub proxy
            for the GPIO_SERVER_ONCRPC remote program. It provides method stubs
            which, when called, in turn call the appropriate remote method (procedure).
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcClientStub" -->
        <member name="M:org.acplt.oncrpc.OncRpcClientStub.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Construct a new <code>OncRpcClientStub</code> for communication with
             a remote ONC/RPC server.
             </summary>
             <remarks>
             Construct a new <code>OncRpcClientStub</code> for communication with
             a remote ONC/RPC server.
             </remarks>
             <param name="host">Host address where the desired ONC/RPC server resides.</param>
             <param name="program">Program number of the desired ONC/RPC server.</param>
             <param name="version">Version number of the desired ONC/RPC server.</param>
             <param name="protocol">
            
             <see cref="T:org.acplt.oncrpc.OncRpcProtocols">Protocol</see>
             to be used for
             ONC/RPC calls. This information is necessary, so port lookups through
             the portmapper can be done.
             </param>
             <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
             <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
             <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientStub.#ctor(org.acplt.oncrpc.OncRpcClient)">
            <summary>
            Construct a new <code>OncRpcClientStub</code> which uses the given
            client proxy object for communication with a remote ONC/RPC server.
            </summary>
            <remarks>
            Construct a new <code>OncRpcClientStub</code> which uses the given
            client proxy object for communication with a remote ONC/RPC server.
            </remarks>
            <param name="client">
            ONC/RPC client proxy object implementing a particular
            IP protocol.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientStub.close">
            <summary>
            Close the connection to an ONC/RPC server and free all network-related
            resources.
            </summary>
            <remarks>
            Close the connection to an ONC/RPC server and free all network-related
            resources. Well -- at least hope, that the Java VM will sometimes free
            some resources. Sigh.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientStub.GetClient">
            <summary>
            Returns ONC/RPC client proxy object used for communication with a
            remote ONC/RPC server.
            </summary>
            <remarks>
            Returns ONC/RPC client proxy object used for communication with a
            remote ONC/RPC server.
            </remarks>
            <returns>ONC/RPC client proxy.</returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientStub.client">
            <summary>
            The real ONC/RPC client which is responsible for handling a particular
            IP protocol.
            </summary>
            <remarks>
            The real ONC/RPC client which is responsible for handling a particular
            IP protocol.
            </remarks>
        </member>
        <member name="M:gpio_server_oncrpcClient.#ctor(System.Net.IPAddress,System.Int32)">
            Constructs a <code>gpio_server_oncrpcClient</code> client stub proxy object
            from which the GPIO_SERVER_ONCRPC remote program can be accessed.
            @param host Internet address of host where to contact the remote program.
            @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
              used for ONC/RPC calls.
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="M:gpio_server_oncrpcClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            Constructs a <code>gpio_server_oncrpcClient</code> client stub proxy object
            from which the GPIO_SERVER_ONCRPC remote program can be accessed.
            @param host Internet address of host where to contact the remote program.
            @param port Port number at host where the remote program can be reached.
            @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
              used for ONC/RPC calls.
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="M:gpio_server_oncrpcClient.#ctor(org.acplt.oncrpc.OncRpcClient)">
            Constructs a <code>gpio_server_oncrpcClient</code> client stub proxy object
            from which the GPIO_SERVER_ONCRPC remote program can be accessed.
            @param client ONC/RPC client connection object implementing a particular
              protocol.
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="M:gpio_server_oncrpcClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
            Constructs a <code>gpio_server_oncrpcClient</code> client stub proxy object
            from which the GPIO_SERVER_ONCRPC remote program can be accessed.
            @param host Internet address of host where to contact the remote program.
            @param program Remote program number.
            @param version Remote program version number.
            @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
              used for ONC/RPC calls.
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="M:gpio_server_oncrpcClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructs a <code>gpio_server_oncrpcClient</code> client stub proxy object
            from which the GPIO_SERVER_ONCRPC remote program can be accessed.
            @param host Internet address of host where to contact the remote program.
            @param program Remote program number.
            @param version Remote program version number.
            @param port Port number at host where the remote program can be reached.
            @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
              used for ONC/RPC calls.
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="M:gpio_server_oncrpcClient.gpio_open_1(System.Int32,System.Int32,System.Int32)">
            Call remote procedure gpio_open_1.
            @param pin parameter (of type int) to the remote procedure call.
            @param direction parameter (of type int) to the remote procedure call.
            @param state parameter (of type int) to the remote procedure call.
            @return Result from remote procedure call (of type int).
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="M:gpio_server_oncrpcClient.gpio_close_1(System.Int32)">
            Call remote procedure gpio_close_1.
            @param pin parameter (of type int) to the remote procedure call.
            @return Result from remote procedure call (of type int).
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="M:gpio_server_oncrpcClient.gpio_read_1(System.Int32)">
            Call remote procedure gpio_read_1.
            @param pin parameter (of type int) to the remote procedure call.
            @return Result from remote procedure call (of type int).
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="M:gpio_server_oncrpcClient.gpio_write_1(System.Int32,System.Int32)">
            Call remote procedure gpio_write_1.
            @param pin parameter (of type int) to the remote procedure call.
            @param state parameter (of type int) to the remote procedure call.
            @return Result from remote procedure call (of type int).
            @throws OncRpcException if an ONC/RPC error occurs.
            @throws IOException if an I/O error occurs.
        </member>
        <member name="T:org.acplt.oncrpc.XdrAble">
            <summary>
            Defines the interface for all classes that should be able to be
            serialized into XDR streams, and deserialized or constructed from
            XDR streams.
            </summary>
            <remarks>
            Defines the interface for all classes that should be able to be
            serialized into XDR streams, and deserialized or constructed from
            XDR streams.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:43 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="M:org.acplt.oncrpc.XdrAble.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- an object into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- an object into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <param name="xdr">XDR stream to which information is sent for encoding.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrAble.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- an object from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- an object from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <param name="xdr">XDR stream from which decoded information is retrieved.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcAcceptStatus">
            <summary>
            A collection of constants used to identify the acceptance status of
            ONC/RPC reply messages.
            </summary>
            <remarks>
            A collection of constants used to identify the acceptance status of
            ONC/RPC reply messages.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:39 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAcceptStatus.ONCRPC_SUCCESS">
            <summary>The remote procedure was called and executed successfully.</summary>
            <remarks>The remote procedure was called and executed successfully.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAcceptStatus.ONCRPC_PROG_UNAVAIL">
            <summary>The program requested is not available.</summary>
            <remarks>
            The program requested is not available. So the remote host
            does not export this particular program and the ONC/RPC server
            which you tried to send a RPC call message doesn't know of this
            program either.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAcceptStatus.ONCRPC_PROG_MISMATCH">
            <summary>A program version number mismatch occured.</summary>
            <remarks>
            A program version number mismatch occured. The remote ONC/RPC
            server does not support this particular version of the program.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAcceptStatus.ONCRPC_PROC_UNAVAIL">
            <summary>The procedure requested is not available.</summary>
            <remarks>
            The procedure requested is not available. The remote ONC/RPC server
            does not support this particular procedure.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAcceptStatus.ONCRPC_GARBAGE_ARGS">
            <summary>
            The server could not decode the arguments sent within the ONC/RPC
            call message.
            </summary>
            <remarks>
            The server could not decode the arguments sent within the ONC/RPC
            call message.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAcceptStatus.ONCRPC_SYSTEM_ERR">
            <summary>
            The server encountered a system error and thus was not able to
            process the procedure call.
            </summary>
            <remarks>
            The server encountered a system error and thus was not able to
            process the procedure call. Causes might be memory shortage,
            desinterest and sloth.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcAuthConstants">
            <summary>
            A collection of constants related to authentication and generally usefull
            for ONC/RPC.
            </summary>
            <remarks>
            A collection of constants related to authentication and generally usefull
            for ONC/RPC.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:40 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthConstants.ONCRPC_MAX_AUTH_BYTES">
            <summary>Maximum length of opaque authentication information.</summary>
            <remarks>Maximum length of opaque authentication information.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthConstants.ONCRPC_MAX_MACHINE_NAME">
            <summary>Maximum length of machine name.</summary>
            <remarks>Maximum length of machine name.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthConstants.ONCRPC_MAX_GROUPS">
            <summary>Maximum allowed number of groups.</summary>
            <remarks>Maximum allowed number of groups.</remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcAuthenticationException">
            <summary>
            The class <code>OncRpcAuthenticationException</code> indicates an
            authentication exception.
            </summary>
            <remarks>
            The class <code>OncRpcAuthenticationException</code> indicates an
            authentication exception.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.2 $ $Date: 2005/11/11 21:01:44 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcException" -->
        <member name="F:org.acplt.oncrpc.OncRpcException.serialVersionUID">
            <summary>Defines the serial version UID for <code>OncRpcException</code>.</summary>
            <remarks>Defines the serial version UID for <code>OncRpcException</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_SUCCESS">
            <summary>The remote procedure call was carried out successfully.</summary>
            <remarks>The remote procedure call was carried out successfully.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_CANTENCODEARGS">
            <summary>
            The client can not encode the argments to be sent for the remote
            procedure call.
            </summary>
            <remarks>
            The client can not encode the argments to be sent for the remote
            procedure call.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_CANTDECODERES">
            <summary>The client can not decode the result from the remote procedure call.</summary>
            <remarks>The client can not decode the result from the remote procedure call.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_CANTSEND">
            <summary>Encoded information can not be sent.</summary>
            <remarks>Encoded information can not be sent.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_CANTRECV">
            <summary>Information to be decoded can not be received.</summary>
            <remarks>Information to be decoded can not be received.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_TIMEDOUT">
            <summary>The remote procedure call timed out.</summary>
            <remarks>The remote procedure call timed out.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_VERSMISMATCH">
            <summary>ONC/RPC versions of server and client are not compatible.</summary>
            <remarks>ONC/RPC versions of server and client are not compatible.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_AUTHERROR">
            <summary>
            The ONC/RPC server did not accept the authentication sent by the
            client.
            </summary>
            <remarks>
            The ONC/RPC server did not accept the authentication sent by the
            client. Bad girl/guy!
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_PROGUNAVAIL">
            <summary>The ONC/RPC server does not support this particular program.</summary>
            <remarks>The ONC/RPC server does not support this particular program.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_PROGVERSMISMATCH">
            <summary>
            The ONC/RPC server does not support this particular version of the
            program.
            </summary>
            <remarks>
            The ONC/RPC server does not support this particular version of the
            program.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_PROCUNAVAIL">
            <summary>The given procedure is not available at the ONC/RPC server.</summary>
            <remarks>The given procedure is not available at the ONC/RPC server.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_CANTDECODEARGS">
            <summary>
            The ONC/RPC server could not decode the arguments sent within the
            call message.
            </summary>
            <remarks>
            The ONC/RPC server could not decode the arguments sent within the
            call message.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_SYSTEMERROR">
            <summary>
            The ONC/RPC server encountered a system error and thus was not able
            to carry out the requested remote function call successfully.
            </summary>
            <remarks>
            The ONC/RPC server encountered a system error and thus was not able
            to carry out the requested remote function call successfully.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_UNKNOWNPROTO">
            <summary>The caller specified an unknown/unsupported IP protocol.</summary>
            <remarks>
            The caller specified an unknown/unsupported IP protocol. Currently,
            only
            <see cref="F:org.acplt.oncrpc.OncRpcProtocols.ONCRPC_TCP">OncRpcProtocols.ONCRPC_TCP</see>
            and
            <see cref="F:org.acplt.oncrpc.OncRpcProtocols.ONCRPC_UDP">OncRpcProtocols.ONCRPC_UDP</see>
            are supported.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_PMAPFAILURE">
            <summary>The portmapper could not be contacted at the given host.</summary>
            <remarks>The portmapper could not be contacted at the given host.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_PROGNOTREGISTERED">
            <summary>The requested program is not registered with the given host.</summary>
            <remarks>The requested program is not registered with the given host.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_FAILED">
            <summary>A generic ONC/RPC exception occured.</summary>
            <remarks>A generic ONC/RPC exception occured. Shit happens...</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_BUFFEROVERFLOW">
            <summary>A buffer overflow occured with an encoding XDR stream.</summary>
            <remarks>
            A buffer overflow occured with an encoding XDR stream. This happens
            if you use UDP-based (datagram-based) XDR streams and you try to encode
            more data than can fit into the sending buffers.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_BUFFERUNDERFLOW">
            <summary>A buffer underflow occured with an decoding XDR stream.</summary>
            <remarks>
            A buffer underflow occured with an decoding XDR stream. This happens
            if you try to decode more data than was sent by the other communication
            partner.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_WRONGMESSAGE">
            <summary>
            Either a ONC/RPC server or client received the wrong type of ONC/RPC
            message when waiting for a request or reply.
            </summary>
            <remarks>
            Either a ONC/RPC server or client received the wrong type of ONC/RPC
            message when waiting for a request or reply. Currently, only the
            decoding methods of the classes
            <see cref="T:org.acplt.oncrpc.OncRpcCallMessage">OncRpcCallMessage</see>
            and
            <see cref="T:org.acplt.oncrpc.OncRpcReplyMessage">OncRpcReplyMessage</see>
            throw exceptions with this reason.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.RPC_CANNOTREGISTER">
            <summary>
            Indicates that a server could not register a transport with the
            ONC/RPC port mapper.
            </summary>
            <remarks>
            Indicates that a server could not register a transport with the
            ONC/RPC port mapper.
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcException.#ctor">
            <summary>
            Constructs an <code>OncRpcException</code> with a reason of
            <see cref="F:org.acplt.oncrpc.OncRpcException.RPC_FAILED">RPC_FAILED</see>
            .
            </summary>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcException.#ctor(System.String)">
            <summary>
            Constructs an <code>OncRpcException</code> with the specified detail
            message.
            </summary>
            <remarks>
            Constructs an <code>OncRpcException</code> with the specified detail
            message.
            </remarks>
            <param name="s">The detail message.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcException.#ctor(System.Int32,System.String)">
            <summary>
            Constructs an <code>OncRpcException</code> with the specified detail
            reason and message.
            </summary>
            <remarks>
            Constructs an <code>OncRpcException</code> with the specified detail
            reason and message. For possible reasons, see below.
            </remarks>
            <param name="r">The detail reason.</param>
            <param name="s">The detail message.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcException.#ctor(System.Int32)">
            <summary>
            Constructs an <code>OncRpcException</code> with the specified detail
            reason.
            </summary>
            <remarks>
            Constructs an <code>OncRpcException</code> with the specified detail
            reason. The detail message is derived automatically from the reason.
            </remarks>
            <param name="r">
            The reason. This can be one of the constants -- oops, that
            should be "public final static integers" -- defined in this
            interface.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcException.getReason">
            <summary>Returns the error reason of this ONC/RPC exception object.</summary>
            <remarks>Returns the error reason of this ONC/RPC exception object.</remarks>
            <returns>
            The error reason of this <code>OncRpcException</code> object if
            it was
            <see cref="M:org.acplt.oncrpc.OncRpcException.#ctor(System.Int32)">created</see>
            with an error reason; or
            <code>RPC_FAILED</code> if it was
            <see cref="M:org.acplt.oncrpc.OncRpcException.#ctor">created</see>
            with no error reason.
            </returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.reason">
            <summary>
            Specific detail (reason) about this <code>OncRpcException</code>,
            like the ONC/RPC error code, as defined by the <code>RPC_xxx</code>
            constants of this interface.
            </summary>
            <remarks>
            Specific detail (reason) about this <code>OncRpcException</code>,
            like the ONC/RPC error code, as defined by the <code>RPC_xxx</code>
            constants of this interface.
            </remarks>
            <serial></serial>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcException.message">
            <summary>
            Specific detail about this <code>OncRpcException</code>, like a
            detailed error message.
            </summary>
            <remarks>
            Specific detail about this <code>OncRpcException</code>, like a
            detailed error message.
            </remarks>
            <serial></serial>
        </member>
        <member name="P:org.acplt.oncrpc.OncRpcException.Message">
            <summary>Returns the error message string of this ONC/RPC object.</summary>
            <remarks>Returns the error message string of this ONC/RPC object.</remarks>
            <returns>
            The error message string of this <code>OncRpcException</code>
            object if it was created either with an error message string or an
            ONC/RPC error code.
            </returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthenticationException.serialVersionUID">
            <summary>Defines the serial version UID for <code>OncRpcAuthenticationException</code>.
            	</summary>
            <remarks>Defines the serial version UID for <code>OncRpcAuthenticationException</code>.
            	</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcAuthenticationException.#ctor(System.Int32)">
            <summary>
            Initializes an <code>OncRpcAuthenticationException</code>
            with a detail of
            <see cref="F:org.acplt.oncrpc.OncRpcException.RPC_AUTHERROR">OncRpcException.RPC_AUTHERROR</see>
            and
            the specified
            <see cref="T:org.acplt.oncrpc.OncRpcAuthStatus">authentication status</see>
            detail.
            </summary>
            <param name="authStatus">
            The authentication status, which can be any one of
            the
            <see cref="T:org.acplt.oncrpc.OncRpcAuthStatus">OncRpcAuthStatus constants</see>
            .
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcAuthenticationException.getAuthStatus">
            <summary>
            Returns the authentication status detail of this ONC/RPC exception
            object.
            </summary>
            <remarks>
            Returns the authentication status detail of this ONC/RPC exception
            object.
            </remarks>
            <returns>The authentication status of this <code>OncRpcException</code>.</returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthenticationException.authStatusDetail">
            <summary>
            Specific authentication status detail (reason why this authentication
            exception was thrown).
            </summary>
            <remarks>
            Specific authentication status detail (reason why this authentication
            exception was thrown).
            </remarks>
            <serial></serial>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcAuthStatus">
            <summary>
            A collection of constants used to identify the authentication status
            (or any authentication errors) in ONC/RPC replies of the corresponding
            ONC/RPC calls.
            </summary>
            <remarks>
            A collection of constants used to identify the authentication status
            (or any authentication errors) in ONC/RPC replies of the corresponding
            ONC/RPC calls.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:40 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthStatus.ONCRPC_AUTH_OK">
            <summary>There is no authentication problem or error.</summary>
            <remarks>There is no authentication problem or error.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthStatus.ONCRPC_AUTH_BADCRED">
            <summary>
            The ONC/RPC server detected a bad credential (that is, the seal was
            broken).
            </summary>
            <remarks>
            The ONC/RPC server detected a bad credential (that is, the seal was
            broken).
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthStatus.ONCRPC_AUTH_REJECTEDCRED">
            <summary>
            The ONC/RPC server has rejected the credential and forces the caller
            to begin a new session.
            </summary>
            <remarks>
            The ONC/RPC server has rejected the credential and forces the caller
            to begin a new session.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthStatus.ONCRPC_AUTH_BADVERF">
            <summary>
            The ONC/RPC server detected a bad verifier (that is, the seal was
            broken).
            </summary>
            <remarks>
            The ONC/RPC server detected a bad verifier (that is, the seal was
            broken).
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthStatus.ONCRPC_AUTH_REJECTEDVERF">
            <summary>
            The ONC/RPC server detected an expired verifier (which can also happen
            if the verifier was replayed).
            </summary>
            <remarks>
            The ONC/RPC server detected an expired verifier (which can also happen
            if the verifier was replayed).
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthStatus.ONCRPC_AUTH_TOOWEAK">
            <summary>The ONC/RPC server rejected the authentication for security reasons.</summary>
            <remarks>The ONC/RPC server rejected the authentication for security reasons.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthStatus.ONCRPC_AUTH_INVALIDRESP">
            <summary>The ONC/RPC client detected a bogus response verifier.</summary>
            <remarks>The ONC/RPC client detected a bogus response verifier.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthStatus.ONCRPC_AUTH_FAILED">
            <summary>Authentication at the ONC/RPC client failed for an unknown reason.</summary>
            <remarks>Authentication at the ONC/RPC client failed for an unknown reason.</remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcAuthType">
            <summary>
            A collection of constants used to identify the authentication schemes
            available for ONC/RPC.
            </summary>
            <remarks>
            A collection of constants used to identify the authentication schemes
            available for ONC/RPC. Please note that currently only
            <code>ONCRPC_AUTH_NONE</code> is supported by this Java package.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:40 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthType.ONCRPC_AUTH_NONE">
            <summary>No authentication scheme used for this remote procedure call.</summary>
            <remarks>No authentication scheme used for this remote procedure call.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthType.ONCRPC_AUTH_UNIX">
            <summary>The so-called "Unix" authentication scheme is not supported.</summary>
            <remarks>
            The so-called "Unix" authentication scheme is not supported. This one
            only sends the users id as well as her/his group identifiers, so this
            is simply far too weak to use in typical situations where
            authentication is requested.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthType.ONCRPC_AUTH_SHORT">
            <summary>The so-called "short hand Unix style" is not supported.</summary>
            <remarks>The so-called "short hand Unix style" is not supported.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcAuthType.ONCRPC_AUTH_DES">
            <summary>
            The DES authentication scheme (using encrypted time stamps) is not
            supported -- and besides, it's not a silver bullet either.
            </summary>
            <remarks>
            The DES authentication scheme (using encrypted time stamps) is not
            supported -- and besides, it's not a silver bullet either.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcBroadcastAdapter">
            <summary>
            An abstract adapter class for
            <see cref="T:org.acplt.oncrpc.OncRpcBroadcastListener">receiving</see>
            <see cref="T:org.acplt.oncrpc.OncRpcBroadcastEvent">ONC/RPC broadcast reply events</see>
            .
            The methods in this class are empty. This class exists as
            convenience for creating listener objects.
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <seealso cref="T:org.acplt.oncrpc.OncRpcUdpClient">OncRpcUdpClient</seealso>
            <seealso cref="T:org.acplt.oncrpc.OncRpcBroadcastAdapter">OncRpcBroadcastAdapter</seealso>
            <seealso cref="T:org.acplt.oncrpc.OncRpcBroadcastListener">OncRpcBroadcastListener</seealso>
            <seealso cref="T:org.acplt.oncrpc.OncRpcBroadcastEvent">OncRpcBroadcastEvent</seealso>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:40 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcBroadcastListener">
            <summary>
            The listener class for
            <see cref="T:org.acplt.oncrpc.OncRpcBroadcastListener">receiving</see>
            <see cref="T:org.acplt.oncrpc.OncRpcBroadcastEvent">ONC/RPC broadcast reply events</see>
            .
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:40 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcBroadcastListener.replyReceived(org.acplt.oncrpc.OncRpcBroadcastEvent)" -->
        <member name="M:org.acplt.oncrpc.OncRpcBroadcastAdapter.replyReceived(org.acplt.oncrpc.OncRpcBroadcastEvent)">
            <summary>Invoked when a reply to an ONC/RPC broadcast call is received.</summary>
            <remarks>Invoked when a reply to an ONC/RPC broadcast call is received.</remarks>
            <seealso cref="T:org.acplt.oncrpc.OncRpcBroadcastEvent">OncRpcBroadcastEvent</seealso>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcBroadcastEvent">
            <summary>
            The class <code>OncRpcBroadcastEvent</code> defines an event fired by
            <see cref="T:org.acplt.oncrpc.OncRpcUdpClient">ONC/RPC UDP/IP-based clients</see>
            whenever replies
            to a
            <see cref="M:org.acplt.oncrpc.OncRpcUdpClient.broadcastCall(System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.OncRpcBroadcastListener)">broadcast call</see>
            are received.
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <seealso cref="T:org.acplt.oncrpc.OncRpcBroadcastListener">OncRpcBroadcastListener</seealso>
            <seealso cref="T:org.acplt.oncrpc.OncRpcBroadcastAdapter">OncRpcBroadcastAdapter</seealso>
            <seealso cref="T:org.acplt.oncrpc.OncRpcUdpClient">OncRpcUdpClient</seealso>
            <version>$Revision: 1.3 $ $Date: 2005/11/11 21:19:20 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcBroadcastEvent.serialVersionUID">
            <summary>Defines the serial version UID for <code>OncRpcBroadcastEvent</code>.</summary>
            <remarks>Defines the serial version UID for <code>OncRpcBroadcastEvent</code>.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcBroadcastEvent.#ctor(org.acplt.oncrpc.OncRpcUdpClient,System.Net.IPAddress,System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble)">
            <summary>
            Creates a new <code>KscPackageUpdateEvent</code> object and
            initializes its state.
            </summary>
            <remarks>
            Creates a new <code>KscPackageUpdateEvent</code> object and
            initializes its state.
            </remarks>
            <param name="source">
            The
            <see cref="T:org.acplt.oncrpc.OncRpcUdpClient">ONC/RPC client object</see>
            which has
            fired this event.
            </param>
            <param name="replyAddress">Internetaddress of reply's origin.</param>
            <param name="procedureNumber">Procedure number of ONC/RPC call.</param>
            <param name="params">The ONC/RPC call resulting in this reply.</param>
            <param name="reply">The ONC/RPC reply itself.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcBroadcastEvent.getReplyAddress">
            <summary>Returns the address of the sender of the ONC/RPC reply message.</summary>
            <remarks>Returns the address of the sender of the ONC/RPC reply message.</remarks>
            <returns>address of sender of reply.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcBroadcastEvent.getReply">
            <summary>Returns ONC/RPC reply message.</summary>
            <remarks>Returns ONC/RPC reply message.</remarks>
            <returns>reply message object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcBroadcastEvent.getProcedureNumber">
            <summary>Returns the number of the remote procedure called.</summary>
            <remarks>Returns the number of the remote procedure called.</remarks>
            <returns>procedure number.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcBroadcastEvent.getParams">
            <summary>Returns the parameter message sent in a broadcast RPC.</summary>
            <remarks>Returns the parameter message sent in a broadcast RPC.</remarks>
            <returns>parameter message object.</returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcBroadcastEvent.replyAddress">
            <summary>Contains the address of the sender of the ONC/RPC reply message.</summary>
            <remarks>Contains the address of the sender of the ONC/RPC reply message.</remarks>
            <serial></serial>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcBroadcastEvent.procedureNumber">
            <summary>Contains the number of the remote procedure called.</summary>
            <remarks>Contains the number of the remote procedure called.</remarks>
            <serial></serial>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcBroadcastEvent.params">
            <summary>Contains the parameters sent in the ONC/RPC broadcast call.</summary>
            <remarks>Contains the parameters sent in the ONC/RPC broadcast call.</remarks>
            <serial></serial>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcBroadcastEvent.reply">
            <summary>
            Contains the reply from a remote ONC/RPC server, which answered
            the broadcast call.
            </summary>
            <remarks>
            Contains the reply from a remote ONC/RPC server, which answered
            the broadcast call.
            </remarks>
            <serial></serial>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcCallMessage" -->
        <member name="T:org.acplt.oncrpc.OncRpcMessage">
            <summary>
            The <code>OncRpcMessage</code> class is an abstract superclass for all
            the message types ONC/RPC defines (well, an overwhelming count of two).
            </summary>
            <remarks>
            The <code>OncRpcMessage</code> class is an abstract superclass for all
            the message types ONC/RPC defines (well, an overwhelming count of two).
            The only things common to all ONC/RPC messages are a message identifier
            and the message type. All other things do not come in until derived
            classes are introduced.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.2 $ $Date: 2003/08/14 07:56:37 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcMessage.#ctor(System.Int32)">
            <summary>
            Constructs  a new <code>OncRpcMessage</code> object with default
            values: a given message type and no particular message identifier.
            </summary>
            <remarks>
            Constructs  a new <code>OncRpcMessage</code> object with default
            values: a given message type and no particular message identifier.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcMessage.messageId">
            <summary>
            The message id is used to identify matching ONC/RPC calls and
            replies.
            </summary>
            <remarks>
            The message id is used to identify matching ONC/RPC calls and
            replies. This is typically choosen by the communication partner
            sending a request. The matching reply then must have the same
            message identifier, so the receiver can match calls and replies.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcMessage.messageType">
            <summary>
            The kind of ONC/RPC message, which can be either a call or a
            reply.
            </summary>
            <remarks>
            The kind of ONC/RPC message, which can be either a call or a
            reply. Can be one of the constants defined in
            <see cref="T:org.acplt.oncrpc.OncRpcMessageType">OncRpcMessageType</see>
            .
            </remarks>
            <seealso cref="T:org.acplt.oncrpc.OncRpcMessageType">OncRpcMessageType</seealso>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcCallMessage.ONCRPC_VERSION">
            <summary>Protocol version used by this ONC/RPC Java implementation.</summary>
            <remarks>
            Protocol version used by this ONC/RPC Java implementation. The protocol
            version 2 is defined in RFC 1831.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcCallMessage.oncRpcVersion">
            <summary>Protocol version used by this ONC/RPC call message.</summary>
            <remarks>Protocol version used by this ONC/RPC call message.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcCallMessage.program">
            <summary>Program number of this particular remote procedure call message.</summary>
            <remarks>Program number of this particular remote procedure call message.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcCallMessage.version">
            <summary>Program version number of this particular remote procedure call message.
            	</summary>
            <remarks>Program version number of this particular remote procedure call message.
            	</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcCallMessage.procedure">
            <summary>Number (identifier) of remote procedure to call.</summary>
            <remarks>Number (identifier) of remote procedure to call.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcCallMessage.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Constructs and initialises a new ONC/RPC call message header.</summary>
            <remarks>Constructs and initialises a new ONC/RPC call message header.</remarks>
            <param name="messageId">
            An identifier choosen by an ONC/RPC client to uniquely
            identify matching call and reply messages.
            </param>
            <param name="program">Program number of the remote procedure to call.</param>
            <param name="version">Program version number of the remote procedure to call.</param>
            <param name="procedure">Procedure number (identifier) of the procedure to call.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcCallMessage.#ctor">
            <summary>Constructs a new (incompletely initialized) ONC/RPC call message header.
            	</summary>
            <remarks>
            Constructs a new (incompletely initialized) ONC/RPC call message header.
            The <code>messageType</code> is set to
            <see cref="F:org.acplt.oncrpc.OncRpcMessageType.ONCRPC_CALL">OncRpcMessageType.ONCRPC_CALL</see>
            and the <code>oncRpcVersion</code>
            is set to
            <see cref="F:org.acplt.oncrpc.OncRpcCallMessage.ONCRPC_VERSION">ONCRPC_VERSION</see>
            .
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcClient" -->
        <member name="M:org.acplt.oncrpc.OncRpcClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>Constructs an <code>OncRpcClient</code> object (the generic part).</summary>
             <remarks>
             Constructs an <code>OncRpcClient</code> object (the generic part). If
             no port number is given (that is, <code>port</code> is <code>0</code>),
             then a port lookup using the portmapper at <code>host</code> is done.
             </remarks>
             <param name="host">Host address where the desired ONC/RPC server resides.</param>
             <param name="program">Program number of the desired ONC/RPC server.</param>
             <param name="version">Version number of the desired ONC/RPC server.</param>
             <param name="protocol">
            
             <see cref="T:org.acplt.oncrpc.OncRpcProtocols">Protocol</see>
             to be used for
             ONC/RPC calls. This information is necessary, so port lookups through
             the portmapper can be done.
             </param>
             <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
             <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
             <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.newOncRpcClient(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates a new ONC/RPC client object, which can handle the requested
             <code>protocol</code>.
             </summary>
             <remarks>
             Creates a new ONC/RPC client object, which can handle the requested
             <code>protocol</code>.
             </remarks>
             <param name="host">Host address where the desired ONC/RPC server resides.</param>
             <param name="program">Program number of the desired ONC/RPC server.</param>
             <param name="version">Version number of the desired ONC/RPC server.</param>
             <param name="protocol">
            
             <see cref="T:org.acplt.oncrpc.OncRpcProtocols">Protocol</see>
             to be used for
             ONC/RPC calls.
             </param>
             <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
             <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
             <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.newOncRpcClient(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates a new ONC/RPC client object, which can handle the requested
             <code>protocol</code>.
             </summary>
             <remarks>
             Creates a new ONC/RPC client object, which can handle the requested
             <code>protocol</code>.
             </remarks>
             <param name="host">Host address where the desired ONC/RPC server resides.</param>
             <param name="program">Program number of the desired ONC/RPC server.</param>
             <param name="version">Version number of the desired ONC/RPC server.</param>
             <param name="port">
             Port number of the ONC/RPC server. Specifiy <code>0</code>
             if this is not known and the portmap process located at host should
             be contacted to find out the port.
             </param>
             <param name="protocol">
            
             <see cref="T:org.acplt.oncrpc.OncRpcProtocols">Protocol</see>
             to be used for
             ONC/RPC calls.
             </param>
             <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
             <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
             <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.close">
            <summary>
            Close the connection to an ONC/RPC server and free all network-related
            resources.
            </summary>
            <remarks>
            Close the connection to an ONC/RPC server and free all network-related
            resources. Well -- at least hope, that the Java VM will sometimes free
            some resources. Sigh.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcClient.call(System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble)" -->
        <member name="M:org.acplt.oncrpc.OncRpcClient.call(System.Int32,System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble)">
            <summary>Calls a remote procedure on an ONC/RPC server.</summary>
            <remarks>Calls a remote procedure on an ONC/RPC server.</remarks>
            <param name="procedureNumber">Procedure number of the procedure to call.</param>
            <param name="versionNumber">Protocol version number.</param>
            <param name="parameters">
            The parameters of the procedure to call, contained
            in an object which implements the
            <see cref="T:org.acplt.oncrpc.XdrAble">XdrAble</see>
            interface.
            </param>
            <param name="result">The object receiving the result of the procedure call.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.setTimeout(System.Int32)">
            <summary>
            Set the timout for remote procedure calls to wait for an answer from
            the ONC/RPC server.
            </summary>
            <remarks>
            Set the timout for remote procedure calls to wait for an answer from
            the ONC/RPC server. If the timeout expires,
            <see cref="M:org.acplt.oncrpc.OncRpcClient.call(System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble)">call(int, XdrAble, XdrAble)</see>
            will raise a
            <see cref="!:InterruptedIOException">InterruptedIOException</see>
            . The default timeout value is
            30 seconds (30,000 milliseconds). The timeout must be &gt; 0.
            A timeout of zero indicated batched calls, for which no reply message
            is expected.
            </remarks>
            <param name="milliseconds">
            Timeout in milliseconds. A timeout of zero indicates
            batched calls.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.getTimeout">
            <summary>Retrieve the current timeout set for remote procedure calls.</summary>
            <remarks>
            Retrieve the current timeout set for remote procedure calls. A timeout
            of zero indicates batching calls (no reply message is expected).
            </remarks>
            <returns>Current timeout.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.getProgram">
            <summary>Returns the program number specified when creating this client.</summary>
            <remarks>Returns the program number specified when creating this client.</remarks>
            <returns>ONC/RPC program number.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.getVersion">
            <summary>Returns the version number specified when creating this client.</summary>
            <remarks>Returns the version number specified when creating this client.</remarks>
            <returns>ONC/RPC version number of ONC/RPC program.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.getHost">
            <summary>Returns the IP address of the server's host this client is connected to.
            	</summary>
            <remarks>Returns the IP address of the server's host this client is connected to.
            	</remarks>
            <returns>IP address of host.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.getPort">
            <summary>Returns port number of the server this client is connected to.</summary>
            <remarks>Returns port number of the server this client is connected to.</remarks>
            <returns>port number of ONC/RPC server.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.setAuth(org.acplt.oncrpc.OncRpcClientAuth)">
            <summary>Sets the authentication to be used when making ONC/RPC calls.</summary>
            <remarks>Sets the authentication to be used when making ONC/RPC calls.</remarks>
            <param name="auth">
            Authentication protocol handling object encapsulating
            authentication information.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.getAuth">
            <summary>Returns the current authentication.</summary>
            <remarks>Returns the current authentication.</remarks>
            <returns>
            Authentication protocol handling object encapsulating
            authentication information.
            </returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.setCharacterEncoding(System.String)">
            <summary>Set the character encoding for (de-)serializing strings.</summary>
            <remarks>Set the character encoding for (de-)serializing strings.</remarks>
            <param name="characterEncoding">
            the encoding to use for (de-)serializing strings.
            If <code>null</code>, the system's default encoding is to be used.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.getCharacterEncoding">
            <summary>Get the character encoding for (de-)serializing strings.</summary>
            <remarks>Get the character encoding for (de-)serializing strings.</remarks>
            <returns>
            the encoding currently used for (de-)serializing strings.
            If <code>null</code>, then the system's default encoding is used.
            </returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClient.nextXid">
            <summary>Create next message identifier.</summary>
            <remarks>
            Create next message identifier. Message identifiers are used to match
            corresponding ONC/RPC call and reply messages.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClient.host">
            <summary>
            Internet address of the host where the ONC/RPC server we want to
            communicate with is located at.
            </summary>
            <remarks>
            Internet address of the host where the ONC/RPC server we want to
            communicate with is located at.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClient.timeout">
            <summary>Timeout (in milliseconds) for communication with an ONC/RPC server.</summary>
            <remarks>
            Timeout (in milliseconds) for communication with an ONC/RPC server.
            ONC/RPC calls through the
            <see cref="M:org.acplt.oncrpc.OncRpcClient.call(System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble)">call(int, XdrAble, XdrAble)</see>
            method
            will throw an exception if no answer from the ONC/RPC server is
            received within the timeout time span.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClient.program">
            <summary>Program number of the ONC/RPC server to communicate with.</summary>
            <remarks>Program number of the ONC/RPC server to communicate with.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClient.version">
            <summary>Version number of the ONC/RPC server to communicate with.</summary>
            <remarks>Version number of the ONC/RPC server to communicate with.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClient.port">
            <summary>Port number at which the ONC/RPC server can be contacted.</summary>
            <remarks>Port number at which the ONC/RPC server can be contacted.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClient.xid">
            <summary>
            The message id (also sometimes known as "transaction id") used for
            the next call message.
            </summary>
            <remarks>
            The message id (also sometimes known as "transaction id") used for
            the next call message.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClient.auth">
            <summary>Authentication protocol object to be used when issuing ONC/RPC calls.</summary>
            <remarks>Authentication protocol object to be used when issuing ONC/RPC calls.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcClientAuth" -->
        <member name="M:org.acplt.oncrpc.OncRpcClientAuth.xdrEncodeCredVerf(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes ONC/RPC authentication information in form of a credential
            and a verifier when sending an ONC/RPC call message.
            </summary>
            <remarks>
            Encodes ONC/RPC authentication information in form of a credential
            and a verifier when sending an ONC/RPC call message.
            </remarks>
            <param name="xdr">
            XDR stream where to encode the credential and the verifier
            to.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuth.xdrDecodeVerf(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes ONC/RPC authentication information in form of a verifier
            when receiving an ONC/RPC reply message.
            </summary>
            <remarks>
            Decodes ONC/RPC authentication information in form of a verifier
            when receiving an ONC/RPC reply message.
            </remarks>
            <param name="xdr">
            XDR stream from which to receive the verifier sent together
            with an ONC/RPC reply message.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcAuthenticationException">
            if the received verifier is
            not kosher.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuth.canRefreshCred">
            <summary>
            Indicates whether the ONC/RPC authentication credential can be
            refreshed.
            </summary>
            <remarks>
            Indicates whether the ONC/RPC authentication credential can be
            refreshed.
            </remarks>
            <returns>true, if the credential can be refreshed</returns>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcClientAuthNone">
            <summary>
            The <code>OncRpcClientAuthNone</code> class handles protocol issues of
            ONC/RPC <code>AUTH_NONE</code> authentication.
            </summary>
            <remarks>
            The <code>OncRpcClientAuthNone</code> class handles protocol issues of
            ONC/RPC <code>AUTH_NONE</code> authentication.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:40 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthNone.xdrEncodeCredVerf(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes ONC/RPC authentication information in form of a credential
            and a verifier when sending an ONC/RPC call message.
            </summary>
            <remarks>
            Encodes ONC/RPC authentication information in form of a credential
            and a verifier when sending an ONC/RPC call message.
            </remarks>
            <param name="xdr">
            XDR stream where to encode the credential and the verifier
            to.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthNone.xdrDecodeVerf(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes ONC/RPC authentication information in form of a verifier
            when receiving an ONC/RPC reply message.
            </summary>
            <remarks>
            Decodes ONC/RPC authentication information in form of a verifier
            when receiving an ONC/RPC reply message.
            </remarks>
            <param name="xdr">
            XDR stream from which to receive the verifier sent together
            with an ONC/RPC reply message.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcAuthenticationException">
            if the received verifier is
            not kosher.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthNone.canRefreshCred">
            <summary>
            Indicates whether the ONC/RPC authentication credential can be
            refreshed.
            </summary>
            <remarks>
            Indicates whether the ONC/RPC authentication credential can be
            refreshed.
            </remarks>
            <returns>true, if the credential can be refreshed</returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientAuthNone.AUTH_NONE">
            <summary>
            Contains a singleton which comes in handy if you just need an
            AUTH_NONE authentification for an ONC/RPC client.
            </summary>
            <remarks>
            Contains a singleton which comes in handy if you just need an
            AUTH_NONE authentification for an ONC/RPC client.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcClientAuthUnix">
            <summary>
            The <code>OncRpcClientAuthUnix</code> class handles protocol issues of
            ONC/RPC <code>AUTH_UNIX</code> (and thus <code>AUTH_SHORT</code>)
            authentication.
            </summary>
            <remarks>
            The <code>OncRpcClientAuthUnix</code> class handles protocol issues of
            ONC/RPC <code>AUTH_UNIX</code> (and thus <code>AUTH_SHORT</code>)
            authentication.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:40 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcClientAuthUnix.#ctor(System.String,System.Int32,System.Int32,System.Int32[])" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcClientAuthUnix.#ctor(System.String,System.Int32,System.Int32)" -->
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.xdrEncodeCredVerf(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes ONC/RPC authentication information in form of a credential
            and a verifier when sending an ONC/RPC call message.
            </summary>
            <remarks>
            Encodes ONC/RPC authentication information in form of a credential
            and a verifier when sending an ONC/RPC call message. The
            <code>AUTH_UNIX</code> authentication method only uses the credential
            but no verifier. If the ONC/RPC server sent a <code>AUTH_SHORT</code>
            "shorthand" credential together with the previous reply message, it
            is used instead of the original credential.
            </remarks>
            <param name="xdr">
            XDR stream where to encode the credential and the verifier
            to.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.xdrDecodeVerf(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes ONC/RPC authentication information in form of a verifier
            when receiving an ONC/RPC reply message.
            </summary>
            <remarks>
            Decodes ONC/RPC authentication information in form of a verifier
            when receiving an ONC/RPC reply message.
            </remarks>
            <param name="xdr">
            XDR stream from which to receive the verifier sent together
            with an ONC/RPC reply message.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcAuthenticationException">
            if the received verifier is
            not kosher.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.canRefreshCred">
            <summary>
            Indicates whether the ONC/RPC authentication credential can be
            refreshed.
            </summary>
            <remarks>
            Indicates whether the ONC/RPC authentication credential can be
            refreshed.
            </remarks>
            <returns>true, if the credential can be refreshed</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.setStamp(System.Int32)">
            <summary>Sets the timestamp information in the credential.</summary>
            <remarks>Sets the timestamp information in the credential.</remarks>
            <param name="stamp">New timestamp</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.getStamp">
            <summary>Returns the timestamp information from the credential.</summary>
            <remarks>Returns the timestamp information from the credential.</remarks>
            <returns>timestamp from credential.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.setMachinename(System.String)">
            <summary>Sets the machine name information in the credential.</summary>
            <remarks>Sets the machine name information in the credential.</remarks>
            <param name="machinename">Machine name.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.getMachinename">
            <summary>Returns the machine name information from the credential.</summary>
            <remarks>Returns the machine name information from the credential.</remarks>
            <returns>machine name.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.setUid(System.Int32)">
            <summary>Sets the user ID in the credential.</summary>
            <remarks>Sets the user ID in the credential.</remarks>
            <param name="uid">User ID.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.getUid">
            <summary>Returns the user ID from the credential.</summary>
            <remarks>Returns the user ID from the credential.</remarks>
            <returns>user ID.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.setGid(System.Int32)">
            <summary>Sets the group ID in the credential.</summary>
            <remarks>Sets the group ID in the credential.</remarks>
            <param name="gid">Group ID.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.getGid">
            <summary>Returns the group ID from the credential.</summary>
            <remarks>Returns the group ID from the credential.</remarks>
            <returns>group ID.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.setGids(System.Int32[])">
            <summary>Sets the group IDs in the credential.</summary>
            <remarks>Sets the group IDs in the credential.</remarks>
            <param name="gids">Array of group IDs.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientAuthUnix.getGids">
            <summary>Returns the group IDs from the credential.</summary>
            <remarks>Returns the group IDs from the credential.</remarks>
            <returns>array of group IDs.</returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientAuthUnix.stamp">
            <summary>Contains timestamp as supplied through credential.</summary>
            <remarks>Contains timestamp as supplied through credential.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientAuthUnix.machinename">
            <summary>Contains the machine name of caller supplied through credential.</summary>
            <remarks>Contains the machine name of caller supplied through credential.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientAuthUnix.uid">
            <summary>Contains the user ID of caller supplied through credential.</summary>
            <remarks>Contains the user ID of caller supplied through credential.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientAuthUnix.gid">
            <summary>Contains the group ID of caller supplied through credential.</summary>
            <remarks>Contains the group ID of caller supplied through credential.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientAuthUnix.gids">
            <summary>
            Contains a set of group IDs the caller belongs to, as supplied
            through credential.
            </summary>
            <remarks>
            Contains a set of group IDs the caller belongs to, as supplied
            through credential.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientAuthUnix.shorthandCred">
            <summary>
            Holds the "shorthand" credentials of type <code>AUTH_SHORT</code>
            optionally returned by an ONC/RPC server to be used on subsequent
            ONC/RPC calls.
            </summary>
            <remarks>
            Holds the "shorthand" credentials of type <code>AUTH_SHORT</code>
            optionally returned by an ONC/RPC server to be used on subsequent
            ONC/RPC calls.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientAuthUnix.NO_GIDS">
            <summary>Contains an empty array of group IDs.</summary>
            <remarks>Contains an empty array of group IDs.</remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcClientCallMessage">
            <summary>
            The <code>OncRpcClientCallMessage</code> class represents a remote procedure
            call message on the client side.
            </summary>
            <remarks>
            The <code>OncRpcClientCallMessage</code> class represents a remote procedure
            call message on the client side.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:40 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientCallMessage.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,org.acplt.oncrpc.OncRpcClientAuth)">
            <summary>Constructs and initialises a new ONC/RPC call message header.</summary>
            <remarks>Constructs and initialises a new ONC/RPC call message header.</remarks>
            <param name="messageId">
            An identifier choosen by an ONC/RPC client to uniquely
            identify matching call and reply messages.
            </param>
            <param name="program">Program number of the remote procedure to call.</param>
            <param name="version">Program version number of the remote procedure to call.</param>
            <param name="procedure">Procedure number (identifier) of the procedure to call.</param>
            <param name="auth">Authentication protocol handling object.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientCallMessage.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a ONC/RPC message header object
            into a XDR stream according to RFC 1831.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a ONC/RPC message header object
            into a XDR stream according to RFC 1831.
            </remarks>
            <param name="xdr">An encoding XDR stream where to put the mess in.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientCallMessage.auth">
            <summary>
            Client-side authentication protocol handling object to use when
            decoding the reply message.
            </summary>
            <remarks>
            Client-side authentication protocol handling object to use when
            decoding the reply message.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcClientReplyMessage" -->
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcReplyMessage" -->
        <member name="F:org.acplt.oncrpc.OncRpcReplyMessage.UNUSED_PARAMETER">
            <summary>
            Dummy, which can be used to identify unused parameters when constructing
            <code>OncRpcReplyMessage</code> objects.
            </summary>
            <remarks>
            Dummy, which can be used to identify unused parameters when constructing
            <code>OncRpcReplyMessage</code> objects.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "F:org.acplt.oncrpc.OncRpcReplyMessage.replyStatus" -->
        <!-- Badly formed XML comment ignored for member "F:org.acplt.oncrpc.OncRpcReplyMessage.acceptStatus" -->
        <member name="F:org.acplt.oncrpc.OncRpcReplyMessage.rejectStatus">
            <summary>
            Rejectance status in case this reply sent in response to a
            rejected call (
            <see cref="F:org.acplt.oncrpc.OncRpcReplyStatus.ONCRPC_MSG_DENIED">OncRpcReplyStatus.ONCRPC_MSG_DENIED
            	</see>
            ). This
            field can take any of the values defined in the
            <see cref="T:org.acplt.oncrpc.OncRpcRejectStatus">OncRpcRejectStatus</see>
            interface.
            </summary>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcReplyMessage.lowVersion">
            <summary>
            Lowest supported version in case of
            <see cref="F:org.acplt.oncrpc.OncRpcRejectStatus.ONCRPC_RPC_MISMATCH">OncRpcRejectStatus.ONCRPC_RPC_MISMATCH
            	</see>
            and
            <see cref="F:org.acplt.oncrpc.OncRpcAcceptStatus.ONCRPC_PROG_MISMATCH">OncRpcAcceptStatus.ONCRPC_PROG_MISMATCH
            	</see>
            .
            </summary>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcReplyMessage.highVersion">
            <summary>
            Highest supported version in case of
            <see cref="F:org.acplt.oncrpc.OncRpcRejectStatus.ONCRPC_RPC_MISMATCH">OncRpcRejectStatus.ONCRPC_RPC_MISMATCH
            	</see>
            and
            <see cref="F:org.acplt.oncrpc.OncRpcAcceptStatus.ONCRPC_PROG_MISMATCH">OncRpcAcceptStatus.ONCRPC_PROG_MISMATCH
            	</see>
            .
            </summary>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcReplyMessage.authStatus">
            <summary>
            Contains the reason for authentification failure in the case
            of
            <see cref="F:org.acplt.oncrpc.OncRpcRejectStatus.ONCRPC_AUTH_ERROR">OncRpcRejectStatus.ONCRPC_AUTH_ERROR
            	</see>
            .
            </summary>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcReplyMessage.#ctor">
            <summary>
            Initializes a new <code>OncRpcReplyMessage</code> object to represent
            an invalid state.
            </summary>
            <remarks>
            Initializes a new <code>OncRpcReplyMessage</code> object to represent
            an invalid state. This default constructor should only be used if in the
            next step the real state of the reply message is immediately decoded
            from a XDR stream.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcReplyMessage.#ctor(org.acplt.oncrpc.OncRpcCallMessage,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" -->
        <member name="M:org.acplt.oncrpc.OncRpcClientReplyMessage.#ctor(org.acplt.oncrpc.OncRpcClientAuth)">
            <summary>
            Initializes a new <code>OncRpcReplyMessage</code> object to represent
            an invalid state.
            </summary>
            <remarks>
            Initializes a new <code>OncRpcReplyMessage</code> object to represent
            an invalid state. This default constructor should only be used if in the
            next step the real state of the reply message is immediately decoded
            from a XDR stream.
            </remarks>
            <param name="auth">
            Client-side authentication protocol handling object which
            is to be used when decoding the verifier data contained in the reply.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientReplyMessage.successfullyAccepted">
            <summary>
            Check whether this <code>OncRpcReplyMessage</code> represents an
            accepted and successfully executed remote procedure call.
            </summary>
            <remarks>
            Check whether this <code>OncRpcReplyMessage</code> represents an
            accepted and successfully executed remote procedure call.
            </remarks>
            <returns>
            <code>true</code> if remote procedure call was accepted and
            successfully executed.
            </returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientReplyMessage.newException">
            <summary>
            Return an appropriate exception object according to the state this
            reply message header object is in.
            </summary>
            <remarks>
            Return an appropriate exception object according to the state this
            reply message header object is in. The exception object then can be
            thrown.
            </remarks>
            <returns>
            Exception object of class
            <see cref="T:org.acplt.oncrpc.OncRpcException">OncRpcException</see>
            or a subclass
            thereof.
            </returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcClientReplyMessage.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a ONC/RPC message header object
            from a XDR stream.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a ONC/RPC message header object
            from a XDR stream.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcClientReplyMessage.auth">
            <summary>
            Client-side authentication protocol handling object to use when
            decoding the reply message.
            </summary>
            <remarks>
            Client-side authentication protocol handling object to use when
            decoding the reply message.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcConstants">
            <summary>A collection of constants generally usefull for ONC/RPC.</summary>
            <remarks>A collection of constants generally usefull for ONC/RPC.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.3 $ $Date: 2005/11/11 21:02:47 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcConstants.REMOTETEA_VERSION_MAJOR">
            <summary>The current major version number of the Remote Tea Java library.</summary>
            <remarks>The current major version number of the Remote Tea Java library.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcConstants.REMOTETEA_VERSION_MINOR">
            <summary>The current minor version number of the Remote Tea Java library.</summary>
            <remarks>The current minor version number of the Remote Tea Java library.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcConstants.REMOTETEA_VERSION_PATCHLEVEL">
            <summary>The current patch level of the Remote Tea Java library.</summary>
            <remarks>The current patch level of the Remote Tea Java library.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcConstants.REMOTETEA_VERSION_PREVERSION">
            <summary>The current preversion version number.</summary>
            <remarks>
            The current preversion version number. If not zero, then this
            indicates a preversion (no, not perversion... ooops, sorry).
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcConstants.REMOTETEA_VERSION_STRING">
            <summary>The current version of the Remote Tea Java library as a string.</summary>
            <remarks>The current version of the Remote Tea Java library as a string.</remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcDumpResult">
            <summary>
            Objects of class <code>OncRpcDumpResult</code> represent the outcome of
            the PMAP_DUMP operation on a portmapper.
            </summary>
            <remarks>
            Objects of class <code>OncRpcDumpResult</code> represent the outcome of
            the PMAP_DUMP operation on a portmapper. <code>OncRpcDumpResult</code>s are
            (de-)serializeable, so they can be flushed down XDR streams.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:41 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcDumpResult.servers">
            <summary>
            Vector of server ident objects describing the currently registered
            ONC/RPC servers (also known as "programmes").
            </summary>
            <remarks>
            Vector of server ident objects describing the currently registered
            ONC/RPC servers (also known as "programmes").
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcDumpResult.#ctor">
            <summary>Initialize an <code>OncRpcServerIdent</code> object.</summary>
            <remarks>
            Initialize an <code>OncRpcServerIdent</code> object. Afterwards, the
            <code>servers</code> field is initialized to contain no elements.
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcDumpResult.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- the result of a PMAP_DUMP operationg
            into a XDR stream.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- the result of a PMAP_DUMP operationg
            into a XDR stream.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcDumpResult.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- the result from a PMAP_DUMP remote
            procedure call from a XDR stream.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- the result from a PMAP_DUMP remote
            procedure call from a XDR stream.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcGetPortResult">
            <summary>
            The <code>OncRpcGetPortResult</code> class represents the result from
            a PMAP_GETPORT remote procedure call to the ONC/RPC portmapper.
            </summary>
            <remarks>
            The <code>OncRpcGetPortResult</code> class represents the result from
            a PMAP_GETPORT remote procedure call to the ONC/RPC portmapper.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:41 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcGetPortResult.port">
            <summary>The port number of the ONC/RPC in question.</summary>
            <remarks>
            The port number of the ONC/RPC in question. This is the only interesting
            piece of information in this class. Go live with it, you don't have
            alternatives.
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcGetPortResult.#ctor">
            <summary>
            Default constructor for initializing an <code>OncRpcGetPortParams</code>
            result object.
            </summary>
            <remarks>
            Default constructor for initializing an <code>OncRpcGetPortParams</code>
            result object. It sets the <code>port</code> member to a useless value.
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcGetPortResult.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- an <code>OncRpcGetPortParams</code>
            object into a XDR stream.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- an <code>OncRpcGetPortParams</code>
            object into a XDR stream.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcGetPortResult.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- an <code>OncRpcGetPortParams</code>
            object from a XDR stream.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- an <code>OncRpcGetPortParams</code>
            object from a XDR stream.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcMessageType">
            <summary>
            A collection of constants used for ONC/RPC messages to identify the
            type of message.
            </summary>
            <remarks>
            A collection of constants used for ONC/RPC messages to identify the
            type of message. Currently, ONC/RPC messages can be either calls or
            replies. Calls are sent by ONC/RPC clients to servers to call a remote
            procedure (for you "ohohpies" that can be translated into the buzzword
            "method"). A server then will answer with a corresponding reply message
            (but not in the case of batched calls).
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:41 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcMessageType.ONCRPC_CALL">
            <summary>Identifies an ONC/RPC call.</summary>
            <remarks>
            Identifies an ONC/RPC call. By a "call" a client request that a server
            carries out a particular remote procedure.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcMessageType.ONCRPC_REPLY">
            <summary>Identifies an ONC/RPC reply.</summary>
            <remarks>
            Identifies an ONC/RPC reply. A server responds with a "reply" after
            a client has sent a "call" for a particular remote procedure, sending
            back the results of calling that procedure.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcPortmapClient" -->
        <member name="F:org.acplt.oncrpc.OncRpcPortmapClient.PMAP_PORT">
            <summary>Well-known port where the portmap process can be found on Internet hosts.
            	</summary>
            <remarks>Well-known port where the portmap process can be found on Internet hosts.
            	</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcPortmapClient.PMAP_PROGRAM">
            <summary>Program number of the portmapper as defined in RFC 1832.</summary>
            <remarks>Program number of the portmapper as defined in RFC 1832.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcPortmapClient.PMAP_VERSION">
            <summary>Program version number of the portmapper as defined in RFC 1832.</summary>
            <remarks>Program version number of the portmapper as defined in RFC 1832.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.#ctor(System.Net.IPAddress)">
            <summary>
            Constructs and initializes an ONC/RPC client object, which can
            communicate with the portmapper at the specified host using the
            UDP/IP datagram-oriented internet protocol.
            </summary>
            <remarks>
            Constructs and initializes an ONC/RPC client object, which can
            communicate with the portmapper at the specified host using the
            UDP/IP datagram-oriented internet protocol.
            </remarks>
            <param name="host">Host where to contact the portmapper.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructs and initializes an ONC/RPC client object, which can
            communicate with the portmapper at the given host using the
            speicified protocol.
            </summary>
            <remarks>
            Constructs and initializes an ONC/RPC client object, which can
            communicate with the portmapper at the given host using the
            speicified protocol.
            </remarks>
            <param name="host">Host where to contact the portmapper.</param>
            <param name="protocol">
            Protocol to use for contacting the portmapper. This
            can be either <code>OncRpcProtocols.ONCRPC_UDP</code> or
            <code>OncRpcProtocols.ONCRPC_TCP</code> (HTTP is currently
            not supported).
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Constructs and initializes an ONC/RPC client object, which can
            communicate with the portmapper at the given host using the
            speicified protocol.
            </summary>
            <remarks>
            Constructs and initializes an ONC/RPC client object, which can
            communicate with the portmapper at the given host using the
            speicified protocol.
            </remarks>
            <param name="host">Host where to contact the portmapper.</param>
            <param name="protocol">
            Protocol to use for contacting the portmapper. This
            can be either <code>OncRpcProtocols.ONCRPC_UDP</code> or
            <code>OncRpcProtocols.ONCRPC_TCP</code> (HTTP is currently
            not supported).
            </param>
            <param name="timeout">
            Timeout in milliseconds for connection operation. This
            parameter applies only when using TCP/IP for talking to the
            portmapper. A negative timeout indicates that the
            implementation-specific timeout setting of the JVM and java.net
            implementation should be used instead.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.close">
            <summary>Closes the connection to the portmapper.</summary>
            <remarks>Closes the connection to the portmapper.</remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">OncRpcException</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.getOncRpcClient">
            <summary>
            Returns the client proxy object used for communicating with the
            portmapper.
            </summary>
            <remarks>
            Returns the client proxy object used for communicating with the
            portmapper.
            </remarks>
            <returns>portmap client proxy object (subclass of <code>OncRpcClient</code>).</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.getPort(System.Int32,System.Int32,System.Int32)">
            <summary>
            Asks the portmapper this <code>OncRpcPortmapClient</code> object is
            a proxy for, for the port number of a particular ONC/RPC server
            identified by the information tuple {program number, program version,
            protocol}.
            </summary>
            <remarks>
            Asks the portmapper this <code>OncRpcPortmapClient</code> object is
            a proxy for, for the port number of a particular ONC/RPC server
            identified by the information tuple {program number, program version,
            protocol}.
            </remarks>
            <param name="program">Program number of the remote procedure call in question.</param>
            <param name="version">Program version number.</param>
            <param name="protocol">
            Protocol lateron used for communication with the
            ONC/RPC server in question. This can be one of the protocols constants
            defined in the
            <see cref="T:org.acplt.oncrpc.OncRpcProtocols">OncRpcProtocols</see>
            interface.
            </param>
            <returns>port number of ONC/RPC server in question.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">
            if the portmapper is not available (detail is
            <see cref="F:org.acplt.oncrpc.OncRpcException.RPC_PMAPFAILURE">OncRpcException.RPC_PMAPFAILURE</see>
            ).
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcProgramNotRegisteredException">
            if the requested program
            is not available.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.setPort(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Register an ONC/RPC with the given program number, version and protocol
            at the given port with the portmapper.
            </summary>
            <remarks>
            Register an ONC/RPC with the given program number, version and protocol
            at the given port with the portmapper.
            </remarks>
            <param name="program">The number of the program to be registered.</param>
            <param name="version">The version number of the program.</param>
            <param name="protocol">
            The protocol spoken by the ONC/RPC server. Can be one
            of the
            <see cref="T:org.acplt.oncrpc.OncRpcProtocols">OncRpcProtocols</see>
            constants.
            </param>
            <param name="port">The port number where the ONC/RPC server can be reached.</param>
            <returns>
            Indicates whether registration succeeded (<code>true</code>) or
            was denied by the portmapper (<code>false</code>).
            </returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">
            if the portmapper is not available (detail is
            <see cref="F:org.acplt.oncrpc.OncRpcException.RPC_PMAPFAILURE">OncRpcException.RPC_PMAPFAILURE</see>
            ).
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.unsetPort(System.Int32,System.Int32)">
            <summary>Unregister an ONC/RPC with the given program number and version.</summary>
            <remarks>
            Unregister an ONC/RPC with the given program number and version. The
            portmapper will remove all entries with the same program number and
            version, regardless of the protocol and port number.
            </remarks>
            <param name="program">The number of the program to be unregistered.</param>
            <param name="version">The version number of the program.</param>
            <returns>
            Indicates whether deregistration succeeded (<code>true</code>)
            or was denied by the portmapper (<code>false</code>).
            </returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">
            if the portmapper is not available (detail is
            <see cref="F:org.acplt.oncrpc.OncRpcException.RPC_PMAPFAILURE">OncRpcException.RPC_PMAPFAILURE</see>
            ).
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.listServers">
            <summary>
            Retrieves a list of all registered ONC/RPC servers at the same host
            as the contacted portmapper.
            </summary>
            <remarks>
            Retrieves a list of all registered ONC/RPC servers at the same host
            as the contacted portmapper.
            </remarks>
            <returns>
            vector of server descriptions (see
            class
            <see cref="T:org.acplt.oncrpc.OncRpcServerIdent">OncRpcServerIdent</see>
            ).
            </returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">
            if the portmapper is not available (detail is
            <see cref="F:org.acplt.oncrpc.OncRpcException.RPC_PMAPFAILURE">OncRpcException.RPC_PMAPFAILURE</see>
            ).
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcPortmapClient.ping">
            <summary>Ping the portmapper (try to call procedure 0).</summary>
            <remarks>Ping the portmapper (try to call procedure 0).</remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">
            if the portmapper is not available (detail is
            <see cref="F:org.acplt.oncrpc.OncRpcException.RPC_PMAPFAILURE">OncRpcException.RPC_PMAPFAILURE</see>
            ).
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcPortmapClient.portmapClient">
            <summary>
            The particular transport-specific ONC/RPC client object used for
            talking to the portmapper.
            </summary>
            <remarks>
            The particular transport-specific ONC/RPC client object used for
            talking to the portmapper.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcPortmapServices">
            <summary>
            A collection of constants used for ONC/RPC messages to identify the
            remote procedure calls offered by ONC/RPC portmappers.
            </summary>
            <remarks>
            A collection of constants used for ONC/RPC messages to identify the
            remote procedure calls offered by ONC/RPC portmappers.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:41 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcPortmapServices.PMAP_SET">
            <summary>Procedure number of portmap service to register an ONC/RPC server.</summary>
            <remarks>Procedure number of portmap service to register an ONC/RPC server.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcPortmapServices.PMAP_UNSET">
            <summary>Procedure number of portmap service to unregister an ONC/RPC server.</summary>
            <remarks>Procedure number of portmap service to unregister an ONC/RPC server.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcPortmapServices.PMAP_GETPORT">
            <summary>
            Procedure number of portmap service to retrieve port number of
            a particular ONC/RPC server.
            </summary>
            <remarks>
            Procedure number of portmap service to retrieve port number of
            a particular ONC/RPC server.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcPortmapServices.PMAP_DUMP">
            <summary>
            Procedure number of portmap service to return information about all
            currently registered ONC/RPC servers.
            </summary>
            <remarks>
            Procedure number of portmap service to return information about all
            currently registered ONC/RPC servers.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcPortmapServices.PMAP_CALLIT">
            <summary>
            Procedure number of portmap service to indirectly call a remote
            procedure an ONC/RPC server through the ONC/RPC portmapper.
            </summary>
            <remarks>
            Procedure number of portmap service to indirectly call a remote
            procedure an ONC/RPC server through the ONC/RPC portmapper.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcProgramNotRegisteredException">
            <summary>
            The class <code>OncRpcProgramNotRegisteredException</code> indicates
            that the requests ONC/RPC program is not available at the specified host.
            </summary>
            <remarks>
            The class <code>OncRpcProgramNotRegisteredException</code> indicates
            that the requests ONC/RPC program is not available at the specified host.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.2 $ $Date: 2005/11/11 21:03:30 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcProgramNotRegisteredException.serialVersionUID">
            <summary>Defines the serial version UID for <code>OncRpcProgramNotRegisteredException</code>.
            	</summary>
            <remarks>Defines the serial version UID for <code>OncRpcProgramNotRegisteredException</code>.
            	</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcProgramNotRegisteredException.#ctor">
            <summary>
            Constructs an ONC/RPC program not registered exception with a detail
            code of <code>OncRpcException.RPC_PROGNOTREGISTERED</code> and an
            appropriate clear-text detail message.
            </summary>
            <remarks>
            Constructs an ONC/RPC program not registered exception with a detail
            code of <code>OncRpcException.RPC_PROGNOTREGISTERED</code> and an
            appropriate clear-text detail message.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcProtocols">
            <summary>A collection of protocol constants used by the ONC/RPC package.</summary>
            <remarks>
            A collection of protocol constants used by the ONC/RPC package. Each
            constant defines one of the possible transport protocols, which can be
            used for communication between ONC/RPC clients and servers.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:41 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcProtocols.ONCRPC_UDP">
            <summary>
            Use the UDP protocol of the IP (Internet Protocol) suite as the
            network communication protocol for doing remote procedure calls.
            </summary>
            <remarks>
            Use the UDP protocol of the IP (Internet Protocol) suite as the
            network communication protocol for doing remote procedure calls.
            This is the same as the IPPROTO_UDP definition from the famous
            BSD socket API.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcProtocols.ONCRPC_TCP">
            <summary>
            Use the TCP protocol of the IP (Internet Protocol) suite as the
            network communication protocol for doing remote procedure calls.
            </summary>
            <remarks>
            Use the TCP protocol of the IP (Internet Protocol) suite as the
            network communication protocol for doing remote procedure calls.
            This is the same as the IPPROTO_TCP definition from the famous
            BSD socket API.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcProtocols.ONCRPC_HTTP">
            <summary>
            Use the HTTP application protocol for tunneling ONC remote procedure
            calls.
            </summary>
            <remarks>
            Use the HTTP application protocol for tunneling ONC remote procedure
            calls. This is definetely not similiar to any definition in the
            famous BSD socket API.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcRejectStatus">
            <summary>
            A collection of constants used to describe why a remote procedure call
            message was rejected.
            </summary>
            <remarks>
            A collection of constants used to describe why a remote procedure call
            message was rejected. This constants are used in
            <see cref="T:org.acplt.oncrpc.OncRpcReplyMessage">OncRpcReplyMessage</see>
            objects, which represent rejected messages if their
            <see cref="F:org.acplt.oncrpc.OncRpcReplyMessage.replyStatus">OncRpcReplyMessage.replyStatus</see>
            field has the value
            <see cref="F:org.acplt.oncrpc.OncRpcReplyStatus.ONCRPC_MSG_DENIED">OncRpcReplyStatus.ONCRPC_MSG_DENIED
            	</see>
            .
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:41 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcRejectStatus.ONCRPC_RPC_MISMATCH">
            <summary>Wrong ONC/RPC protocol version used in call (it needs to be version 2).</summary>
            <remarks>Wrong ONC/RPC protocol version used in call (it needs to be version 2).</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcRejectStatus.ONCRPC_AUTH_ERROR">
            <summary>The remote ONC/RPC server could not authenticate the caller.</summary>
            <remarks>The remote ONC/RPC server could not authenticate the caller.</remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcReplyStatus">
            <summary>
            A collection of constants used to identify the (overall) status of an
            ONC/RPC reply message.
            </summary>
            <remarks>
            A collection of constants used to identify the (overall) status of an
            ONC/RPC reply message.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:41 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcReplyStatus.ONCRPC_MSG_ACCEPTED">
            <summary>
            Reply status identifying that the corresponding message call was
            accepted.
            </summary>
            <remarks>
            Reply status identifying that the corresponding message call was
            accepted.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcReplyStatus.ONCRPC_MSG_DENIED">
            <summary>
            Reply status identifying that the corresponding message call was
            denied.
            </summary>
            <remarks>
            Reply status identifying that the corresponding message call was
            denied.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.OncRpcServerIdent" -->
        <member name="F:org.acplt.oncrpc.OncRpcServerIdent.program">
            <summary>The program number of the ONC/RPC server in question.</summary>
            <remarks>The program number of the ONC/RPC server in question.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcServerIdent.version">
            <summary>The program version number of the ONC/RPC server in question.</summary>
            <remarks>The program version number of the ONC/RPC server in question.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcServerIdent.protocol">
            <summary>The protocol used for communicating with the ONC/RPC server in question.
            	</summary>
            <remarks>
            The protocol used for communicating with the ONC/RPC server in question.
            This can be one of the constants ("public final static int") defined
            in the
            <see cref="T:org.acplt.oncrpc.OncRpcProtocols">OncRpcProtocols</see>
            interface.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcServerIdent.port">
            <summary>The port number of the ONC/RPC server in question.</summary>
            <remarks>The port number of the ONC/RPC server in question.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcServerIdent.#ctor">
            <summary>
            Constuct an <code>OncRpcServerIdent</code> object with senseless
            default values for the requested program number, version number,
            protocol type and port number.
            </summary>
            <remarks>
            Constuct an <code>OncRpcServerIdent</code> object with senseless
            default values for the requested program number, version number,
            protocol type and port number.
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcServerIdent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an <code>OncRpcServerIdent</code> object with the
            requested program number, version number, protocol type and port
            number.
            </summary>
            <remarks>
            Constructs an <code>OncRpcServerIdent</code> object with the
            requested program number, version number, protocol type and port
            number.
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcServerIdent.#ctor(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Constructs an <code>OncRpcServerIdent</code> object and restores
            its state from the given XDR stream.
            </summary>
            <remarks>
            Constructs an <code>OncRpcServerIdent</code> object and restores
            its state from the given XDR stream.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcServerIdent.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- an OncRpcServerIdent object
            into a XDR stream.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- an OncRpcServerIdent object
            into a XDR stream.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcServerIdent.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- an OncRpcServerIdent object
            from a XDR stream.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- an OncRpcServerIdent object
            from a XDR stream.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcTcpClient">
            <summary>
            ONC/RPC client which communicates with ONC/RPC servers over the network
            using the stream-oriented protocol TCP/IP.
            </summary>
            <remarks>
            ONC/RPC client which communicates with ONC/RPC servers over the network
            using the stream-oriented protocol TCP/IP.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.5 $ $Date: 2005/11/11 21:04:30 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcTcpClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcTcpClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcTcpClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcTcpClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" -->
        <member name="M:org.acplt.oncrpc.OncRpcTcpClient.close">
            <summary>
            Close the connection to an ONC/RPC server and free all network-related
            resources.
            </summary>
            <remarks>
            Close the connection to an ONC/RPC server and free all network-related
            resources. Well -- at least hope, that the Java VM will sometimes free
            some resources. Sigh.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcTcpClient.call(System.Int32,System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble)" -->
        <member name="M:org.acplt.oncrpc.OncRpcTcpClient.batchCall(System.Int32,org.acplt.oncrpc.XdrAble,System.Boolean)">
            <summary>Issues a batched call for a remote procedure to an ONC/RPC server.</summary>
            <remarks>
            Issues a batched call for a remote procedure to an ONC/RPC server.
            Below is a small example (exception handling ommited for clarity):
            <pre>
            OncRpcTcpClient client = new OncRpcTcpClient(
            InetAddress.getByName("localhost"),
            myprogramnumber, myprogramversion,
            OncRpcProtocols.ONCRPC_TCP);
            client.callBatch(42, myparams, false);
            client.callBatch(42, myotherparams, false);
            client.callBatch(42, myfinalparams, true);
            </pre>
            In the example above, three calls are batched in a row and only be sent
            all together with the third call. Note that batched calls must not expect
            replies, with the only exception being the last call in a batch:
            <pre>
            client.callBatch(42, myparams, false);
            client.callBatch(42, myotherparams, false);
            client.call(43, myfinalparams, myfinalresult);
            </pre>
            </remarks>
            <param name="procedureNumber">Procedure number of the procedure to call.</param>
            <param name="params">
            The parameters of the procedure to call, contained
            in an object which implements the
            <see cref="T:org.acplt.oncrpc.XdrAble">XdrAble</see>
            interface.
            </param>
            <param name="flush">
            Make sure that all pending batched calls are sent to
            the server.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcTcpClient.setTimeout(System.Int32)">
            <summary>
            Set the timout for remote procedure calls to wait for an answer from
            the ONC/RPC server.
            </summary>
            <remarks>
            Set the timout for remote procedure calls to wait for an answer from
            the ONC/RPC server. If the timeout expires,
            <see cref="M:org.acplt.oncrpc.OncRpcClient.call(System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble)">OncRpcClient.call(int, XdrAble, XdrAble)
            	</see>
            will raise a
            <see cref="!:InterruptedIOException">InterruptedIOException</see>
            . The default timeout value is
            30 seconds (30,000 milliseconds). The timeout must be &gt; 0.
            A timeout of zero indicates a batched call, for which no reply message
            is expected.
            </remarks>
            <param name="milliseconds">
            Timeout in milliseconds. A timeout of zero indicates
            batched calls.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcTcpClient.setTransmissionTimeout(System.Int32)">
            <summary>Set the timeout used during transmission of data.</summary>
            <remarks>
            Set the timeout used during transmission of data. If the flow of data
            when sending calls or receiving replies blocks longer than the given
            timeout, an exception is thrown. The timeout must be &gt; 0.
            </remarks>
            <param name="milliseconds">Transmission timeout in milliseconds.</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcTcpClient.getTransmissionTimeout">
            <summary>
            Retrieve the current timeout used during transmission phases (call and
            reply phases).
            </summary>
            <remarks>
            Retrieve the current timeout used during transmission phases (call and
            reply phases).
            </remarks>
            <returns>Current transmission timeout.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcTcpClient.setCharacterEncoding(System.String)">
            <summary>Set the character encoding for (de-)serializing strings.</summary>
            <remarks>Set the character encoding for (de-)serializing strings.</remarks>
            <param name="characterEncoding">
            the encoding to use for (de-)serializing strings.
            If <code>null</code>, the system's default encoding is to be used.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcTcpClient.getCharacterEncoding">
            <summary>Get the character encoding for (de-)serializing strings.</summary>
            <remarks>Get the character encoding for (de-)serializing strings.</remarks>
            <returns>
            the encoding currently used for (de-)serializing strings.
            If <code>null</code>, then the system's default encoding is used.
            </returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcTcpClient.socket">
            <summary>
            TCP socket used for stream-oriented communication with an ONC/RPC
            server.
            </summary>
            <remarks>
            TCP socket used for stream-oriented communication with an ONC/RPC
            server.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcTcpClient.sendingXdr">
            <summary>
            XDR encoding stream used for sending requests via TCP/IP to an ONC/RPC
            server.
            </summary>
            <remarks>
            XDR encoding stream used for sending requests via TCP/IP to an ONC/RPC
            server.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcTcpClient.receivingXdr">
            <summary>
            XDR decoding stream used when receiving replies via TCP/IP from an
            ONC/RPC server.
            </summary>
            <remarks>
            XDR decoding stream used when receiving replies via TCP/IP from an
            ONC/RPC server.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcTcpClient.transmissionTimeout">
            <summary>
            Timeout during the phase where data is sent within calls, or data is
            received within replies.
            </summary>
            <remarks>
            Timeout during the phase where data is sent within calls, or data is
            received within replies.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcTimeoutException">
            <summary>
            The class <code>OncRpcTimeoutException</code> indicates a timed out
            call exception.
            </summary>
            <remarks>
            The class <code>OncRpcTimeoutException</code> indicates a timed out
            call exception.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.2 $ $Date: 2005/11/11 21:05:00 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcTimeoutException.serialVersionUID">
            <summary>Defines the serial version UID for <code>OncRpcTimeoutException</code>.</summary>
            <remarks>Defines the serial version UID for <code>OncRpcTimeoutException</code>.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcTimeoutException.#ctor">
            <summary>
            Initializes an <code>OncRpcTimeoutException</code>
            with a detail of
            <see cref="F:org.acplt.oncrpc.OncRpcException.RPC_TIMEDOUT">OncRpcException.RPC_TIMEDOUT</see>
            .
            </summary>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcUdpClient">
            <summary>
            ONC/RPC client which communicates with ONC/RPC servers over the network
            using the datagram-oriented protocol UDP/IP.
            </summary>
            <remarks>
            ONC/RPC client which communicates with ONC/RPC servers over the network
            using the datagram-oriented protocol UDP/IP.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.6 $ $Date: 2007/05/29 18:48:27 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcUdpClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcUdpClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Int32)" -->
        <member name="M:org.acplt.oncrpc.OncRpcUdpClient.close">
            <summary>
            Close the connection to an ONC/RPC server and free all network-related
            resources.
            </summary>
            <remarks>
            Close the connection to an ONC/RPC server and free all network-related
            resources. Well -- at least hope, that the Java VM will sometimes free
            some resources. Sigh.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcUdpClient.call(System.Int32,System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble)" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.OncRpcUdpClient.broadcastCall(System.Int32,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.XdrAble,org.acplt.oncrpc.OncRpcBroadcastListener)" -->
        <member name="M:org.acplt.oncrpc.OncRpcUdpClient.setRetransmissionMode(System.Int32)">
            <summary>
            Set the
            <see cref="T:org.acplt.oncrpc.OncRpcUdpRetransmissionMode">retransmission mode</see>
            for
            lost remote procedure calls. The default retransmission mode is
            <see cref="F:org.acplt.oncrpc.OncRpcUdpRetransmissionMode.FIXED">OncRpcUdpRetransmissionMode.FIXED</see>
            .
            </summary>
            <param name="mode">Retransmission mode (either fixed or exponential).</param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcUdpClient.getRetransmissionMode">
            <summary>
            Retrieve the current
            <see cref="T:org.acplt.oncrpc.OncRpcUdpRetransmissionMode">retransmission mode</see>
            set for
            retransmission of lost ONC/RPC calls.
            </summary>
            <returns>Current retransmission mode.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcUdpClient.setRetransmissionTimeout(System.Int32)">
            <summary>
            Set the retransmission timout for remote procedure calls to wait for
            an answer from the ONC/RPC server before resending the call.
            </summary>
            <remarks>
            Set the retransmission timout for remote procedure calls to wait for
            an answer from the ONC/RPC server before resending the call. The
            default retransmission timeout is the 30 seconds. The retransmission
            timeout must be &gt; 0. To disable retransmission of lost calls, set
            the retransmission timeout to be the same value as the timeout.
            </remarks>
            <param name="milliseconds">
            Timeout in milliseconds. A timeout of zero indicates
            batched calls.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcUdpClient.getRetransmissionTimeout">
            <summary>
            Retrieve the current retransmission timeout set for remote procedure
            calls.
            </summary>
            <remarks>
            Retrieve the current retransmission timeout set for remote procedure
            calls.
            </remarks>
            <returns>Current retransmission timeout.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcUdpClient.setCharacterEncoding(System.String)">
            <summary>Set the character encoding for (de-)serializing strings.</summary>
            <remarks>Set the character encoding for (de-)serializing strings.</remarks>
            <param name="characterEncoding">
            the encoding to use for (de-)serializing strings.
            If <code>null</code>, the system's default encoding is to be used.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.OncRpcUdpClient.getCharacterEncoding">
            <summary>Get the character encoding for (de-)serializing strings.</summary>
            <remarks>Get the character encoding for (de-)serializing strings.</remarks>
            <returns>
            the encoding currently used for (de-)serializing strings.
            If <code>null</code>, then the system's default encoding is used.
            </returns>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcUdpClient.socket">
            <summary>
            UDP socket used for datagram-based communication with an ONC/RPC
            server.
            </summary>
            <remarks>
            UDP socket used for datagram-based communication with an ONC/RPC
            server.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcUdpClient.sendingXdr">
            <summary>
            XDR encoding stream used for sending requests via UDP/IP to an ONC/RPC
            server.
            </summary>
            <remarks>
            XDR encoding stream used for sending requests via UDP/IP to an ONC/RPC
            server.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcUdpClient.receivingXdr">
            <summary>
            XDR decoding stream used when receiving replies via UDP/IP from an
            ONC/RPC server.
            </summary>
            <remarks>
            XDR decoding stream used when receiving replies via UDP/IP from an
            ONC/RPC server.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcUdpClient.retransmissionTimeout">
            <summary>
            Retransmission timeout used for resending ONC/RPC calls when an ONC/RPC
            server does not answer fast enough.
            </summary>
            <remarks>
            Retransmission timeout used for resending ONC/RPC calls when an ONC/RPC
            server does not answer fast enough. The default retransmission timeout
            is identical to the overall timeout for ONC/RPC calls (thus UDP/IP-based
            clients will not retransmit lost calls).
            </remarks>
            <seealso cref="F:org.acplt.oncrpc.OncRpcUdpClient.retransmissionMode">retransmissionMode</seealso>
            <seealso cref="M:org.acplt.oncrpc.OncRpcClient.setTimeout(System.Int32)">OncRpcClient.setTimeout(int)</seealso>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcUdpClient.retransmissionMode">
            <summary>Retransmission mode used when resending ONC/RPC calls.</summary>
            <remarks>
            Retransmission mode used when resending ONC/RPC calls. Default mode is
            <see cref="F:org.acplt.oncrpc.OncRpcUdpRetransmissionMode.FIXED">fixed timeout mode</see>
            .
            </remarks>
            <seealso cref="T:org.acplt.oncrpc.OncRpcUdpRetransmissionMode">OncRpcUdpRetransmissionMode</seealso>
        </member>
        <member name="T:org.acplt.oncrpc.OncRpcUdpRetransmissionMode">
            <summary>
            A collection of constants used to identify the retransmission schemes
            when using
            <see cref="T:org.acplt.oncrpc.OncRpcUdpClient">UDP/IP-based ONC/RPC clients</see>
            .
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <version>$Revision: 1.1.1.1 $ $Date: 2003/08/13 12:03:43 $ $State: Exp $ $Locker:  $
            	</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcUdpRetransmissionMode.EXPONENTIAL">
            <summary>
            In exponentional back-off retransmission mode, UDP/IP-based ONC/RPC
            clients first wait a given retransmission timeout period before
            sending the ONC/RPC call again.
            </summary>
            <remarks>
            In exponentional back-off retransmission mode, UDP/IP-based ONC/RPC
            clients first wait a given retransmission timeout period before
            sending the ONC/RPC call again. The retransmission timeout then is
            doubled on each try.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.OncRpcUdpRetransmissionMode.FIXED">
            <summary>
            In fixed retransmission mode, UDP/IP-based ONC/RPC clients wait a
            given retransmission timeout period before send the ONC/RPC call again.
            </summary>
            <remarks>
            In fixed retransmission mode, UDP/IP-based ONC/RPC clients wait a
            given retransmission timeout period before send the ONC/RPC call again.
            The retransmission timeout is not changed between consecutive tries
            but is fixed instead.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrBoolean" -->
        <member name="M:org.acplt.oncrpc.XdrBoolean.#ctor(System.Boolean)">
            <summary>Constructs and initializes a new <code>XdrBoolean</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrBoolean</code> object.</remarks>
            <param name="value">Boolean value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBoolean.#ctor">
            <summary>Constructs and initializes a new <code>XdrBoolean</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrBoolean</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBoolean.booleanValue">
            <summary>
            Returns the value of this <code>XdrBoolean</code> object as a boolean
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrBoolean</code> object as a boolean
            primitive.
            </remarks>
            <returns>The primitive <code>boolean</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBoolean.boolValue">
            <summary>
            Returns the value of this <code>XdrBoolean</code> object as a boolean
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrBoolean</code> object as a boolean
            primitive.
            </remarks>
            <returns>The primitive <code>boolean</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBoolean.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR boolean into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR boolean into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBoolean.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR boolean from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR boolean from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBoolean.value">
            <summary>The encapsulated boolean value itself.</summary>
            <remarks>The encapsulated boolean value itself.</remarks>
        </member>
        <member name="T:org.acplt.oncrpc.XdrBufferDecodingStream">
            <summary>
            The <code>XdrBufferDecodingStream</code> class provides the necessary
            functionality to
            <see cref="T:org.acplt.oncrpc.XdrDecodingStream">XdrDecodingStream</see>
            to retrieve XDR packets from
            a byte buffer.
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <version>$Revision: 1.2 $ $Date: 2005/11/11 21:06:36 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrDecodingStream" -->
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.getSenderAddress">
            <summary>Returns the Internet address of the sender of the current XDR data.</summary>
            <remarks>
            Returns the Internet address of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrDecodingStream.beginDecoding">beginDecoding()</see>
            , otherwise
            it might return stale information.
            </remarks>
            <returns>InetAddress of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.getSenderPort">
            <summary>Returns the port number of the sender of the current XDR data.</summary>
            <remarks>
            Returns the port number of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrDecodingStream.beginDecoding">beginDecoding()</see>
            , otherwise
            it might return stale information.
            </remarks>
            <returns>Port number of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.beginDecoding">
            <summary>Initiates decoding of the next XDR record.</summary>
            <remarks>
            Initiates decoding of the next XDR record. This typically involves
            filling the internal buffer with the next datagram from the network, or
            reading the next chunk of data from a stream-oriented connection. In
            case of memory-based communication this might involve waiting for
            some other process to fill the buffer and signal availability of new
            XDR data.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrDecodingStream.endDecoding" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrDecodingStream.Close" -->
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeInt">
            <summary>
            Decodes (aka "deserializes") a "XDR int" value received from a
            XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a "XDR int" value received from a
            XDR stream. A XDR int is 32 bits wide -- the same width Java's "int"
            data type has. This method is one of the basic methods all other
            methods can rely on. Because it's so basic, derived classes have to
            implement it.
            </remarks>
            <returns>The decoded int value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeOpaque(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeOpaque(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeOpaque(System.Byte[])">
            <summary>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values. Only the opaque value is decoded, so the
            caller has to know how long the opaque value will be. The decoded data
            is always padded to be a multiple of four (because that's what the
            sender does).
            </remarks>
            <param name="opaque">Byte vector which will receive the decoded opaque value.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeDynamicOpaque">
            <summary>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values. The length of the opaque value to decode
            is pulled off of the XDR stream, so the caller does not need to know
            the exact length in advance. The decoded data is always padded to be
            a multiple of four (because that's what the sender does).
            </remarks>
            <returns>The byte vector containing the decoded data.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeByteVector">
            <summary>
            Decodes (aka "deserializes") a vector of bytes, which is nothing more
            than a series of octets (or 8 bits wide bytes), each packed into its
            very own 4 bytes (XDR int).
            </summary>
            <remarks>
            Decodes (aka "deserializes") a vector of bytes, which is nothing more
            than a series of octets (or 8 bits wide bytes), each packed into its
            very own 4 bytes (XDR int). Byte vectors are decoded together with a
            preceeding length value. This way the receiver doesn't need to know
            the length of the vector in advance.
            </remarks>
            <returns>The byte vector containing the decoded data.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeByteFixedVector(System.Int32)">
            <summary>
            Decodes (aka "deserializes") a vector of bytes, which is nothing more
            than a series of octets (or 8 bits wide bytes), each packed into its
            very own 4 bytes (XDR int).
            </summary>
            <remarks>
            Decodes (aka "deserializes") a vector of bytes, which is nothing more
            than a series of octets (or 8 bits wide bytes), each packed into its
            very own 4 bytes (XDR int).
            </remarks>
            <param name="length">of vector to read.</param>
            <returns>The byte vector containing the decoded data.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeByte">
            <summary>Decodes (aka "deserializes") a byte read from this XDR stream.</summary>
            <remarks>Decodes (aka "deserializes") a byte read from this XDR stream.</remarks>
            <returns>Decoded byte value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeShort">
            <summary>
            Decodes (aka "deserializes") a short (which is a 16 bit quantity)
            read from this XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a short (which is a 16 bit quantity)
            read from this XDR stream.
            </remarks>
            <returns>Decoded short value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeLong" -->
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeFloat">
            <summary>
            Decodes (aka "deserializes") a float (which is a 32 bits wide floating
            point entity) read from a XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a float (which is a 32 bits wide floating
            point entity) read from a XDR stream.
            </remarks>
            <returns>Decoded float value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeDouble">
            <summary>
            Decodes (aka "deserializes") a double (which is a 64 bits wide floating
            point entity) read from a XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a double (which is a 64 bits wide floating
            point entity) read from a XDR stream.
            </remarks>
            <returns>Decoded double value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeBoolean">
            <summary>Decodes (aka "deserializes") a boolean read from a XDR stream.</summary>
            <remarks>Decodes (aka "deserializes") a boolean read from a XDR stream.</remarks>
            <returns>Decoded boolean value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeString">
            <summary>Decodes (aka "deserializes") a string read from a XDR stream.</summary>
            <remarks>
            Decodes (aka "deserializes") a string read from a XDR stream.
            If a character encoding has been set for this stream, then this
            will be used for conversion.
            </remarks>
            <returns>Decoded String value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeShortVector">
            <summary>
            Decodes (aka "deserializes") a vector of short integers read from a
            XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a vector of short integers read from a
            XDR stream.
            </remarks>
            <returns>Decoded vector of short integers.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeShortFixedVector(System.Int32)">
            <summary>
            Decodes (aka "deserializes") a vector of short integers read from a
            XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a vector of short integers read from a
            XDR stream.
            </remarks>
            <param name="length">of vector to read.</param>
            <returns>Decoded vector of short integers.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeIntVector">
            <summary>Decodes (aka "deserializes") a vector of ints read from a XDR stream.</summary>
            <remarks>Decodes (aka "deserializes") a vector of ints read from a XDR stream.</remarks>
            <returns>Decoded int vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeIntFixedVector(System.Int32)">
            <summary>Decodes (aka "deserializes") a vector of ints read from a XDR stream.</summary>
            <remarks>Decodes (aka "deserializes") a vector of ints read from a XDR stream.</remarks>
            <param name="length">of vector to read.</param>
            <returns>Decoded int vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeLongVector">
            <summary>Decodes (aka "deserializes") a vector of longs read from a XDR stream.</summary>
            <remarks>Decodes (aka "deserializes") a vector of longs read from a XDR stream.</remarks>
            <returns>Decoded long vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeLongFixedVector(System.Int32)">
            <summary>Decodes (aka "deserializes") a vector of longs read from a XDR stream.</summary>
            <remarks>Decodes (aka "deserializes") a vector of longs read from a XDR stream.</remarks>
            <param name="length">of vector to read.</param>
            <returns>Decoded long vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeFloatVector">
            <summary>Decodes (aka "deserializes") a vector of floats read from a XDR stream.</summary>
            <remarks>Decodes (aka "deserializes") a vector of floats read from a XDR stream.</remarks>
            <returns>Decoded float vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeFloatFixedVector(System.Int32)">
            <summary>Decodes (aka "deserializes") a vector of floats read from a XDR stream.</summary>
            <remarks>Decodes (aka "deserializes") a vector of floats read from a XDR stream.</remarks>
            <param name="length">of vector to read.</param>
            <returns>Decoded float vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeDoubleVector">
            <summary>Decodes (aka "deserializes") a vector of doubles read from a XDR stream.
            	</summary>
            <remarks>Decodes (aka "deserializes") a vector of doubles read from a XDR stream.
            	</remarks>
            <returns>Decoded double vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeDoubleFixedVector(System.Int32)">
            <summary>Decodes (aka "deserializes") a vector of doubles read from a XDR stream.
            	</summary>
            <remarks>Decodes (aka "deserializes") a vector of doubles read from a XDR stream.
            	</remarks>
            <param name="length">of vector to read.</param>
            <returns>Decoded double vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeBooleanVector">
            <summary>Decodes (aka "deserializes") a vector of booleans read from a XDR stream.
            	</summary>
            <remarks>Decodes (aka "deserializes") a vector of booleans read from a XDR stream.
            	</remarks>
            <returns>Decoded boolean vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeBooleanFixedVector(System.Int32)">
            <summary>Decodes (aka "deserializes") a vector of booleans read from a XDR stream.
            	</summary>
            <remarks>Decodes (aka "deserializes") a vector of booleans read from a XDR stream.
            	</remarks>
            <param name="length">of vector to read.</param>
            <returns>Decoded boolean vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeStringVector">
            <summary>Decodes (aka "deserializes") a vector of strings read from a XDR stream.
            	</summary>
            <remarks>Decodes (aka "deserializes") a vector of strings read from a XDR stream.
            	</remarks>
            <returns>Decoded String vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.xdrDecodeStringFixedVector(System.Int32)">
            <summary>Decodes (aka "deserializes") a vector of strings read from a XDR stream.
            	</summary>
            <remarks>Decodes (aka "deserializes") a vector of strings read from a XDR stream.
            	</remarks>
            <param name="length">of vector to read.</param>
            <returns>Decoded String vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.setCharacterEncoding(System.String)">
            <summary>Set the character encoding for deserializing strings.</summary>
            <remarks>Set the character encoding for deserializing strings.</remarks>
            <param name="characterEncoding">
            the encoding to use for deserializing strings.
            If <code>null</code>, the system's default encoding is to be used.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDecodingStream.getCharacterEncoding">
            <summary>Get the character encoding for deserializing strings.</summary>
            <remarks>Get the character encoding for deserializing strings.</remarks>
            <returns>
            the encoding currently used for deserializing strings.
            If <code>null</code>, then the system's default encoding is used.
            </returns>
        </member>
        <member name="F:org.acplt.oncrpc.XdrDecodingStream.characterEncoding">
            <summary>
            Encoding to use when deserializing strings or <code>null</code> if
            the system's default encoding should be used.
            </summary>
            <remarks>
            Encoding to use when deserializing strings or <code>null</code> if
            the system's default encoding should be used.
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a new <code>XdrUdpDecodingStream</code> object and associate
            it with a buffer containing encoded XDR data.
            </summary>
            <remarks>
            Construct a new <code>XdrUdpDecodingStream</code> object and associate
            it with a buffer containing encoded XDR data.
            </remarks>
            <param name="buffer">Buffer containing encoded XDR data.</param>
            <param name="encodedLength">Length of encoded XDR data within the buffer.</param>
            <exception cref="T:System.ArgumentException">
            if <code>encodedLength</code> is not
            a multiple of four.
            </exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.#ctor(System.Byte[])">
            <summary>
            Construct a new <code>XdrUdpDecodingStream</code> object and associate
            it with a buffer containing encoded XDR data.
            </summary>
            <remarks>
            Construct a new <code>XdrUdpDecodingStream</code> object and associate
            it with a buffer containing encoded XDR data.
            </remarks>
            <param name="buffer">Buffer containing encoded XDR data.</param>
            <exception cref="T:System.ArgumentException">
            if the size of the buffer is not
            a multiple of four.
            </exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.setXdrData(System.Byte[],System.Int32)">
            <summary>
            Sets the buffer containing encoded XDR data as well as the length of
            the encoded data.
            </summary>
            <remarks>
            Sets the buffer containing encoded XDR data as well as the length of
            the encoded data.
            </remarks>
            <param name="buffer">Buffer containing encoded XDR data.</param>
            <param name="encodedLength">Length of encoded XDR data within the buffer.</param>
            <exception cref="T:System.ArgumentException">
            if <code>encodedLength</code> is not
            a multiple of four.
            </exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.getSenderAddress">
            <summary>Returns the Internet address of the sender of the current XDR data.</summary>
            <remarks>
            Returns the Internet address of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrBufferDecodingStream.beginDecoding">beginDecoding()</see>
            ,
            otherwise it might return stale information.
            </remarks>
            <returns>InetAddress of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.getSenderPort">
            <summary>Returns the port number of the sender of the current XDR data.</summary>
            <remarks>
            Returns the port number of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrBufferDecodingStream.beginDecoding">beginDecoding()</see>
            ,
            otherwise it might return stale information.
            </remarks>
            <returns>Port number of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.beginDecoding">
            <summary>Initiates decoding of the next XDR record.</summary>
            <remarks>Initiates decoding of the next XDR record.</remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrBufferDecodingStream.endDecoding" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrBufferDecodingStream.Close" -->
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.xdrDecodeInt">
            <summary>
            Decodes (aka "deserializes") a "XDR int" value received from a
            XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a "XDR int" value received from a
            XDR stream. A XDR int is 32 bits wide -- the same width Java's "int"
            data type has.
            </remarks>
            <returns>The decoded int value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.xdrDecodeOpaque(System.Int32)">
            <summary>
            Decodes (aka "deserializes") an opaque value, which is nothing more
            than a series of octets (or 8 bits wide bytes).
            </summary>
            <remarks>
            Decodes (aka "deserializes") an opaque value, which is nothing more
            than a series of octets (or 8 bits wide bytes). Because the length
            of the opaque value is given, we don't need to retrieve it from the
            XDR stream. This is different from
            <see cref="M:org.acplt.oncrpc.XdrBufferDecodingStream.xdrDecodeOpaque(System.Byte[],System.Int32,System.Int32)">xdrDecodeOpaque(byte[], int, int)</see>
            where
            first the length of the opaque value is retrieved from the XDR stream.
            </remarks>
            <param name="length">Length of opaque data to decode.</param>
            <returns>Opaque data as a byte vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferDecodingStream.xdrDecodeOpaque(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>. Only the opaque value is decoded, so the
            caller has to know how long the opaque value will be. The decoded data
            is always padded to be a multiple of four (because that's what the
            sender does).
            </remarks>
            <param name="opaque">Byte vector which will receive the decoded opaque value.</param>
            <param name="offset">Start offset in the byte vector.</param>
            <param name="length">the number of bytes to decode.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBufferDecodingStream.buffer">
            <summary>
            The buffer which will be filled from the datagram socket and then
            be used to supply the information when decoding data.
            </summary>
            <remarks>
            The buffer which will be filled from the datagram socket and then
            be used to supply the information when decoding data.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBufferDecodingStream.encodedLength">
            <summary>Length of encoded data in <code>buffer</code>.</summary>
            <remarks>Length of encoded data in <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBufferDecodingStream.bufferIndex">
            <summary>The read pointer is an index into the <code>buffer</code>.</summary>
            <remarks>The read pointer is an index into the <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBufferDecodingStream.bufferHighmark">
            <summary>
            Index of the last four byte word in the buffer, which has been read
            in from the datagram socket.
            </summary>
            <remarks>
            Index of the last four byte word in the buffer, which has been read
            in from the datagram socket.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.XdrBufferEncodingStream">
            <summary>
            The <code>XdrBufferEncodingStream</code> class provides a buffer-based
            XDR stream.
            </summary>
            <remarks>
            The <code>XdrBufferEncodingStream</code> class provides a buffer-based
            XDR stream.
            Converted to C# using the db4o Sharpen tool.
            </remarks>
            <version>$Revision: 1.2 $ $Date: 2003/08/14 11:26:50 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrEncodingStream" -->
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.beginEncoding(System.Net.IPAddress,System.Int32)">
            <summary>Begins encoding a new XDR record.</summary>
            <remarks>
            Begins encoding a new XDR record. This typically involves resetting this
            encoding XDR stream back into a known state.
            </remarks>
            <param name="receiverAddress">
            Indicates the receiver of the XDR data. This can
            be <code>null</code> for XDR streams connected permanently to a
            receiver (like in case of TCP/IP based XDR streams).
            </param>
            <param name="receiverPort">Port number of the receiver.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrEncodingStream.endEncoding" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrEncodingStream.Close" -->
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeInt(System.Int32)">
            <summary>
            Encodes (aka "serializes") a "XDR int" value and writes it down a
            XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a "XDR int" value and writes it down a
            XDR stream. A XDR int is 32 bits wide -- the same width Java's "int"
            data type has. This method is one of the basic methods all other
            methods can rely on. Because it's so basic, derived classes have to
            implement it.
            </remarks>
            <param name="value">The int value to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeOpaque(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeDynamicOpaque(System.Byte[])">
            <summary>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values.
            </summary>
            <remarks>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values. The length of the opaque value is written
            to the XDR stream, so the receiver does not need to know
            the exact length in advance. The encoded data is always padded to be
            a multiple of four to maintain XDR alignment.
            </remarks>
            <param name="value">
            The opaque value to be encoded in the form of a series of
            bytes.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeOpaque(System.Byte[])">
            <summary>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values.
            </summary>
            <remarks>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values. Only the opaque value is encoded, but
            no length indication is preceeding the opaque value, so the receiver
            has to know how long the opaque value will be. The encoded data is
            always padded to be a multiple of four. If the length of the given byte
            vector is not a multiple of four, zero bytes will be used for padding.
            </remarks>
            <param name="value">
            The opaque value to be encoded in the form of a series of
            bytes.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeOpaque(System.Byte[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values.
            </summary>
            <remarks>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values. Only the opaque value is encoded, but
            no length indication is preceeding the opaque value, so the receiver
            has to know how long the opaque value will be. The encoded data is
            always padded to be a multiple of four. If the length of the given byte
            vector is not a multiple of four, zero bytes will be used for padding.
            </remarks>
            <param name="value">
            The opaque value to be encoded in the form of a series of
            bytes.
            </param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeByteVector(System.Byte[])">
            <summary>
            Encodes (aka "serializes") a vector of bytes, which is nothing more
            than a series of octets (or 8 bits wide bytes), each packed into its
            very own 4 bytes (XDR int).
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of bytes, which is nothing more
            than a series of octets (or 8 bits wide bytes), each packed into its
            very own 4 bytes (XDR int). Byte vectors are encoded together with a
            preceeding length value. This way the receiver doesn't need to know
            the length of the vector in advance.
            </remarks>
            <param name="value">Byte vector to encode.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeByteFixedVector(System.Byte[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a vector of bytes, which is nothing more
            than a series of octets (or 8 bits wide bytes), each packed into its
            very own 4 bytes (XDR int).
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of bytes, which is nothing more
            than a series of octets (or 8 bits wide bytes), each packed into its
            very own 4 bytes (XDR int).
            </remarks>
            <param name="value">Byte vector to encode.</param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeByte(System.Byte)">
            <summary>Encodes (aka "serializes") a byte and write it down this XDR stream.</summary>
            <remarks>Encodes (aka "serializes") a byte and write it down this XDR stream.</remarks>
            <param name="value">Byte value to encode.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeShort(System.Int16)">
            <summary>
            Encodes (aka "serializes") a short (which is a 16 bits wide quantity)
            and write it down this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a short (which is a 16 bits wide quantity)
            and write it down this XDR stream.
            </remarks>
            <param name="value">Short value to encode.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeLong(System.Int64)" -->
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeFloat(System.Single)">
            <summary>
            Encodes (aka "serializes") a float (which is a 32 bits wide floating
            point quantity) and write it down this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a float (which is a 32 bits wide floating
            point quantity) and write it down this XDR stream.
            </remarks>
            <param name="value">Float value to encode.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeDouble(System.Double)">
            <summary>
            Encodes (aka "serializes") a double (which is a 64 bits wide floating
            point quantity) and write it down this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a double (which is a 64 bits wide floating
            point quantity) and write it down this XDR stream.
            </remarks>
            <param name="value">Double value to encode.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeBoolean(System.Boolean)">
            <summary>Encodes (aka "serializes") a boolean and writes it down this XDR stream.
            	</summary>
            <remarks>Encodes (aka "serializes") a boolean and writes it down this XDR stream.
            	</remarks>
            <param name="value">Boolean value to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeString(System.String)">
            <summary>Encodes (aka "serializes") a string and writes it down this XDR stream.</summary>
            <remarks>Encodes (aka "serializes") a string and writes it down this XDR stream.</remarks>
            <param name="value">String value to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeShortVector(System.Int16[])">
            <summary>
            Encodes (aka "serializes") a vector of short integers and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of short integers and writes it down
            this XDR stream.
            </remarks>
            <param name="value">short vector to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeShortFixedVector(System.Int16[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a vector of short integers and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of short integers and writes it down
            this XDR stream.
            </remarks>
            <param name="value">short vector to be encoded.</param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeIntVector(System.Int32[])">
            <summary>
            Encodes (aka "serializes") a vector of ints and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of ints and writes it down
            this XDR stream.
            </remarks>
            <param name="value">int vector to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeIntFixedVector(System.Int32[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a vector of ints and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of ints and writes it down
            this XDR stream.
            </remarks>
            <param name="value">int vector to be encoded.</param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeLongVector(System.Int64[])">
            <summary>
            Encodes (aka "serializes") a vector of long integers and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of long integers and writes it down
            this XDR stream.
            </remarks>
            <param name="value">long vector to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeLongFixedVector(System.Int64[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a vector of long integers and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of long integers and writes it down
            this XDR stream.
            </remarks>
            <param name="value">long vector to be encoded.</param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeFloatVector(System.Single[])">
            <summary>
            Encodes (aka "serializes") a vector of floats and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of floats and writes it down
            this XDR stream.
            </remarks>
            <param name="value">float vector to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeFloatFixedVector(System.Single[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a vector of floats and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of floats and writes it down
            this XDR stream.
            </remarks>
            <param name="value">float vector to be encoded.</param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeDoubleVector(System.Double[])">
            <summary>
            Encodes (aka "serializes") a vector of doubles and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of doubles and writes it down
            this XDR stream.
            </remarks>
            <param name="value">double vector to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeDoubleFixedVector(System.Double[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a vector of doubles and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of doubles and writes it down
            this XDR stream.
            </remarks>
            <param name="value">double vector to be encoded.</param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeBooleanVector(System.Boolean[])">
            <summary>
            Encodes (aka "serializes") a vector of booleans and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of booleans and writes it down
            this XDR stream.
            </remarks>
            <param name="value">long vector to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeBooleanFixedVector(System.Boolean[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a vector of booleans and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of booleans and writes it down
            this XDR stream.
            </remarks>
            <param name="value">long vector to be encoded.</param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeStringVector(System.String[])">
            <summary>
            Encodes (aka "serializes") a vector of strings and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of strings and writes it down
            this XDR stream.
            </remarks>
            <param name="value">String vector to be encoded.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.xdrEncodeStringFixedVector(System.String[],System.Int32)">
            <summary>
            Encodes (aka "serializes") a vector of strings and writes it down
            this XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a vector of strings and writes it down
            this XDR stream.
            </remarks>
            <param name="value">String vector to be encoded.</param>
            <param name="length">
            of vector to write. This parameter is used as a sanity
            check.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">
            if the length of the vector does not
            match the specified length.
            </exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.setCharacterEncoding(System.String)">
            <summary>Set the character encoding for serializing strings.</summary>
            <remarks>Set the character encoding for serializing strings.</remarks>
            <param name="characterEncoding">
            the encoding to use for serializing strings.
            If <code>null</code>, the system's default encoding is to be used.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrEncodingStream.getCharacterEncoding">
            <summary>Get the character encoding for serializing strings.</summary>
            <remarks>Get the character encoding for serializing strings.</remarks>
            <returns>
            the encoding currently used for serializing strings.
            If <code>null</code>, then the system's default encoding is used.
            </returns>
        </member>
        <member name="F:org.acplt.oncrpc.XdrEncodingStream.characterEncoding">
            <summary>
            Encoding to use when serializing strings or <code>null</code> if
            the system's default encoding should be used.
            </summary>
            <remarks>
            Encoding to use when serializing strings or <code>null</code> if
            the system's default encoding should be used.
            </remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.#ctor(System.Int32)">
            <summary>
            Constructs a new <code>XdrBufferEncodingStream</code> with a buffer
            to encode data into of the given size.
            </summary>
            <remarks>
            Constructs a new <code>XdrBufferEncodingStream</code> with a buffer
            to encode data into of the given size.
            </remarks>
            <param name="bufferSize">Size of buffer to store encoded data in.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.#ctor(System.Byte[])">
            <summary>
            Constructs a new <code>XdrBufferEncodingStream</code> with a given
            buffer.
            </summary>
            <remarks>
            Constructs a new <code>XdrBufferEncodingStream</code> with a given
            buffer.
            </remarks>
            <param name="buffer">Buffer to store encoded information in.</param>
            <exception cref="T:System.ArgumentException">
            if <code>encodedLength</code> is not
            a multiple of four.
            </exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.getXdrLength">
            <summary>Returns the amount of encoded data in the buffer.</summary>
            <remarks>Returns the amount of encoded data in the buffer.</remarks>
            <returns>length of data encoded in buffer.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.getXdrData">
            <summary>Returns the buffer holding encoded data.</summary>
            <remarks>Returns the buffer holding encoded data.</remarks>
            <returns>Buffer with encoded data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.beginEncoding(System.Net.IPAddress,System.Int32)">
            <summary>Begins encoding a new XDR record.</summary>
            <remarks>
            Begins encoding a new XDR record. This involves resetting this
            encoding XDR stream back into a known state.
            </remarks>
            <param name="receiverAddress">
            Indicates the receiver of the XDR data. This can be
            <code>null</code> for XDR streams connected permanently to a
            receiver (like in case of TCP/IP based XDR streams).
            </param>
            <param name="receiverPort">Port number of the receiver.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.endEncoding">
            <summary>
            Flushes this encoding XDR stream and forces any buffered output bytes
            to be written out.
            </summary>
            <remarks>
            Flushes this encoding XDR stream and forces any buffered output bytes
            to be written out. The general contract of <code>endEncoding</code> is that
            calling it is an indication that the current record is finished and any
            bytes previously encoded should immediately be written to their intended
            destination.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.Close">
            <summary>
            Closes this encoding XDR stream and releases any system resources
            associated with this stream.
            </summary>
            <remarks>
            Closes this encoding XDR stream and releases any system resources
            associated with this stream. The general contract of <code>close</code>
            is that it closes the encoding XDR stream. A closed XDR stream cannot
            perform encoding operations and cannot be reopened.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.xdrEncodeInt(System.Int32)">
            <summary>
            Encodes (aka "serializes") a "XDR int" value and writes it down a
            XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a "XDR int" value and writes it down a
            XDR stream. A XDR int is 32 bits wide -- the same width Java's "int"
            data type has. This method is one of the basic methods all other
            methods can rely on.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBufferEncodingStream.xdrEncodeOpaque(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>.
            </summary>
            <remarks>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>. Only the opaque value is encoded, but
            no length indication is preceeding the opaque value, so the receiver
            has to know how long the opaque value will be. The encoded data is
            always padded to be a multiple of four. If the given length is not a
            multiple of four, zero bytes will be used for padding.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBufferEncodingStream.buffer">
            <summary>
            The buffer which will receive the encoded information, before it
            is sent via a datagram socket.
            </summary>
            <remarks>
            The buffer which will receive the encoded information, before it
            is sent via a datagram socket.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBufferEncodingStream.bufferIndex">
            <summary>The write pointer is an index into the <code>buffer</code>.</summary>
            <remarks>The write pointer is an index into the <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBufferEncodingStream.bufferHighmark">
            <summary>Index of the last four byte word in the buffer.</summary>
            <remarks>Index of the last four byte word in the buffer.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBufferEncodingStream.paddingZeros">
            <summary>Some zeros, only needed for padding -- like in real life.</summary>
            <remarks>Some zeros, only needed for padding -- like in real life.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrByte" -->
        <member name="M:org.acplt.oncrpc.XdrByte.#ctor(System.Byte)">
            <summary>Constructs and initializes a new <code>XdrByte</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrByte</code> object.</remarks>
            <param name="value">Byte value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrByte.#ctor">
            <summary>Constructs and initializes a new <code>XdrByte</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrByte</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrByte.byteValue">
            <summary>
            Returns the value of this <code>XdrByte</code> object as a byte
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrByte</code> object as a byte
            primitive.
            </remarks>
            <returns>The primitive <code>byte</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrByte.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR byte into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR byte into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrByte.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR byte from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR byte from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrByte.value">
            <summary>The encapsulated byte value itself.</summary>
            <remarks>The encapsulated byte value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrBytes" -->
        <member name="M:org.acplt.oncrpc.XdrBytes.#ctor(System.Byte[])">
            <summary>Constructs and initializes a new <code>XdrBytes</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrBytes</code> object.</remarks>
            <param name="value">bytes vector</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBytes.#ctor">
            <summary>Constructs and initializes a new <code>XdrBytes</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrBytes</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBytes.bytesValue">
            <summary>
            Returns the value of this <code>XdrBytes</code> object as a byte
            vector.
            </summary>
            <remarks>
            Returns the value of this <code>XdrBytes</code> object as a byte
            vector.
            </remarks>
            <returns>The primitive <code>byte[]</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBytes.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR bytes value into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR bytes value into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrBytes.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR bytes value from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR bytes value from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrBytes.value">
            <summary>The encapsulated bytes value itself.</summary>
            <remarks>The encapsulated bytes value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrChar" -->
        <member name="M:org.acplt.oncrpc.XdrChar.#ctor(System.Char)">
            <summary>Constructs and initializes a new <code>XdrChar</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrChar</code> object.</remarks>
            <param name="value">Char value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrChar.#ctor">
            <summary>Constructs and initializes a new <code>XdrChar</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrChar</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrChar.charValue">
            <summary>
            Returns the value of this <code>XdrChar</code> object as a char
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrChar</code> object as a char
            primitive.
            </remarks>
            <returns>The primitive <code>char</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrChar.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR char into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR char into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrChar.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR char from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR char from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrChar.value">
            <summary>The encapsulated char value itself.</summary>
            <remarks>The encapsulated char value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrDouble" -->
        <member name="M:org.acplt.oncrpc.XdrDouble.#ctor(System.Double)">
            <summary>Constructs and initializes a new <code>XdrDouble</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrDouble</code> object.</remarks>
            <param name="value">Double value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDouble.#ctor">
            <summary>Constructs and initializes a new <code>XdrDouble</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrDouble</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDouble.doubleValue">
            <summary>
            Returns the value of this <code>XdrDouble</code> object as a double
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrDouble</code> object as a double
            primitive.
            </remarks>
            <returns>The primitive <code>double</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDouble.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR double into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR double into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDouble.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR double from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR double from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrDouble.value">
            <summary>The encapsulated double value itself.</summary>
            <remarks>The encapsulated double value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrDynamicOpaque" -->
        <member name="M:org.acplt.oncrpc.XdrDynamicOpaque.#ctor">
            <summary>Constructs and initializes a new <code>XdrDynamicOpaque</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrDynamicOpaque</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDynamicOpaque.#ctor(System.Byte[])">
            <summary>Constructs and initializes a new <code>XdrDynamicOpaque</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrDynamicOpaque</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDynamicOpaque.dynamicOpaqueValue">
            <summary>
            Returns the value of this <code>XdrDynamicOpaque</code> object as a byte
            vector.
            </summary>
            <remarks>
            Returns the value of this <code>XdrDynamicOpaque</code> object as a byte
            vector.
            </remarks>
            <returns>The primitive <code>byte[]</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDynamicOpaque.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR opaque into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR opaque into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrDynamicOpaque.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR opaque from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR opaque from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrDynamicOpaque.value">
            <summary>The encapsulated opaque value itself.</summary>
            <remarks>The encapsulated opaque value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrFloat" -->
        <member name="M:org.acplt.oncrpc.XdrFloat.#ctor(System.Single)">
            <summary>Constructs and initializes a new <code>XdrFloat</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrFloat</code> object.</remarks>
            <param name="value">Float value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrFloat.#ctor">
            <summary>Constructs and initializes a new <code>XdrFloat</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrFloat</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrFloat.floatValue">
            <summary>
            Returns the value of this <code>XdrFloat</code> object as a float
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrFloat</code> object as a float
            primitive.
            </remarks>
            <returns>The primitive <code>float</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrFloat.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR float into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR float into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrFloat.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR float from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR float from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrFloat.value">
            <summary>The encapsulated float value itself.</summary>
            <remarks>The encapsulated float value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrInt" -->
        <member name="M:org.acplt.oncrpc.XdrInt.#ctor(System.Int32)">
            <summary>Constructs and initializes a new <code>XdrInt</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrInt</code> object.</remarks>
            <param name="value">Int value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrInt.#ctor">
            <summary>Constructs and initializes a new <code>XdrInt</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrInt</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrInt.intValue">
            <summary>
            Returns the value of this <code>XdrInt</code> object as a int
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrInt</code> object as a int
            primitive.
            </remarks>
            <returns>The primitive <code>int</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrInt.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR int into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR int into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrInt.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR int from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR int from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrInt.value">
            <summary>The encapsulated int value itself.</summary>
            <remarks>The encapsulated int value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrLong" -->
        <member name="M:org.acplt.oncrpc.XdrLong.#ctor(System.Int64)">
            <summary>Constructs and initializes a new <code>XdrLong</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrLong</code> object.</remarks>
            <param name="value">Long value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrLong.#ctor">
            <summary>Constructs and initializes a new <code>XdrLong</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrLong</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrLong.longValue">
            <summary>
            Returns the value of this <code>XdrLong</code> object as a long
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrLong</code> object as a long
            primitive.
            </remarks>
            <returns>The primitive <code>long</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrLong.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR long into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR long into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrLong.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR long from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR long from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrLong.value">
            <summary>The encapsulated long value itself.</summary>
            <remarks>The encapsulated long value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrOpaque" -->
        <member name="M:org.acplt.oncrpc.XdrOpaque.#ctor(System.Byte[])">
            <summary>Constructs and initializes a new <code>XdrOpaque</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrOpaque</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrOpaque.#ctor(System.Int32)">
            <summary>
            Constructs and initializes a new <code>XdrOpaque</code> object given
            only the size of the opaque value.
            </summary>
            <remarks>
            Constructs and initializes a new <code>XdrOpaque</code> object given
            only the size of the opaque value.
            </remarks>
            <param name="length">size of opaque value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrOpaque.opaqueValue">
            <summary>
            Returns the value of this <code>XdrOpaque</code> object as a byte
            vector.
            </summary>
            <remarks>
            Returns the value of this <code>XdrOpaque</code> object as a byte
            vector.
            </remarks>
            <returns>The primitive <code>byte[]</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrOpaque.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR opaque into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR opaque into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrOpaque.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR opaque from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR opaque from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrOpaque.value">
            <summary>The encapsulated opaque value itself.</summary>
            <remarks>The encapsulated opaque value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrShort" -->
        <member name="M:org.acplt.oncrpc.XdrShort.#ctor(System.Int16)">
            <summary>Constructs and initializes a new <code>XdrShort</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrShort</code> object.</remarks>
            <param name="value">Short value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrShort.#ctor">
            <summary>Constructs and initializes a new <code>XdrShort</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrShort</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrShort.shortValue">
            <summary>
            Returns the value of this <code>XdrShort</code> object as a short
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrShort</code> object as a short
            primitive.
            </remarks>
            <returns>The primitive <code>short</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrShort.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR short into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR short into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrShort.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR short from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR short from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrShort.value">
            <summary>The encapsulated short value itself.</summary>
            <remarks>The encapsulated short value itself.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrString" -->
        <member name="M:org.acplt.oncrpc.XdrString.#ctor(System.String)">
            <summary>Constructs and initializes a new <code>XdrString</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrString</code> object.</remarks>
            <param name="value">String value.</param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrString.#ctor">
            <summary>Constructs and initializes a new <code>XdrString</code> object.</summary>
            <remarks>Constructs and initializes a new <code>XdrString</code> object.</remarks>
        </member>
        <member name="M:org.acplt.oncrpc.XdrString.stringValue">
            <summary>
            Returns the value of this <code>XdrString</code> object as a string
            primitive.
            </summary>
            <remarks>
            Returns the value of this <code>XdrString</code> object as a string
            primitive.
            </remarks>
            <returns>The primitive <code>String</code> value of this object.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrString.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a XDR string into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a XDR string into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrString.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a XDR string from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a XDR string from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrString.value">
            <summary>The encapsulated string value itself.</summary>
            <remarks>The encapsulated string value itself.</remarks>
        </member>
        <member name="T:org.acplt.oncrpc.XdrTcpDecodingStream">
            <summary>
            The <code>XdrTcpDecodingStream</code> class provides the necessary
            functionality to
            <see cref="T:org.acplt.oncrpc.XdrDecodingStream">XdrDecodingStream</see>
            to receive XDR records from the
            network using the stream-oriented TCP/IP.
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <version>$Revision: 1.2 $ $Date: 2005/11/11 21:07:27 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpDecodingStream.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Construct a new <code>XdrTcpDecodingStream</code> object and associate
            it with the given <code>networkStream</code> for TCP/IP-based
            communication.
            </summary>
            <remarks>
            Construct a new <code>XdrTcpDecodingStream</code> object and associate
            it with the given <code>networkStream</code> for TCP/IP-based
            communication.
            </remarks>
            <param name="networkStream">Socket from which XDR data is received.</param>
            <param name="bufferSize">
            Size of packet buffer for storing received XDR
            data.
            </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpDecodingStream.getSenderAddress">
            <summary>Returns the Internet address of the sender of the current XDR data.</summary>
            <remarks>
            Returns the Internet address of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrTcpDecodingStream.beginDecoding">beginDecoding()</see>
            , otherwise
            it might return stale information.
            </remarks>
            <returns>InetAddress of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpDecodingStream.getSenderPort">
            <summary>Returns the port number of the sender of the current XDR data.</summary>
            <remarks>
            Returns the port number of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrTcpDecodingStream.beginDecoding">beginDecoding()</see>
            , otherwise
            it might return stale information.
            </remarks>
            <returns>Port number of the sender of the current XDR data.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrTcpDecodingStream.beginDecoding" -->
        <member name="M:org.acplt.oncrpc.XdrTcpDecodingStream.readBuffer(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>Read into buffer exactly the amound of bytes specified.</summary>
            <remarks>Read into buffer exactly the amound of bytes specified.</remarks>
            <param name="stream">Input stream to read byte data from.</param>
            <param name="bytes">buffer receiving data.</param>
            <param name="bytesToRead">number of bytes to read into buffer.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">
            if EOF is reached before all bytes could
            be read.
            </exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrTcpDecodingStream.fill" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrTcpDecodingStream.endDecoding" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrTcpDecodingStream.Close" -->
        <member name="M:org.acplt.oncrpc.XdrTcpDecodingStream.xdrDecodeInt">
            <summary>
            Decodes (aka "deserializes") a "XDR int" value received from a
            XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a "XDR int" value received from a
            XDR stream. A XDR int is 32 bits wide -- the same width Java's "int"
            data type has.
            </remarks>
            <returns>The decoded int value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpDecodingStream.xdrDecodeOpaque(System.Int32)">
            <summary>
            Decodes (aka "deserializes") an opaque value, which is nothing more
            than a series of octets (or 8 bits wide bytes).
            </summary>
            <remarks>
            Decodes (aka "deserializes") an opaque value, which is nothing more
            than a series of octets (or 8 bits wide bytes). Because the length
            of the opaque value is given, we don't need to retrieve it from the
            XDR stream. This is different from
            <see cref="M:org.acplt.oncrpc.XdrTcpDecodingStream.xdrDecodeOpaque(System.Byte[],System.Int32,System.Int32)">xdrDecodeOpaque(byte[], int, int)</see>
            where
            first the length of the opaque value is retrieved from the XDR stream.
            </remarks>
            <param name="length">Length of opaque data to decode.</param>
            <returns>Opaque data as a byte vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpDecodingStream.xdrDecodeOpaque(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>. Only the opaque value is decoded, so the
            caller has to know how long the opaque value will be. The decoded data
            is always padded to be a multiple of four (because that's what the
            sender does).
            </remarks>
            <param name="opaque">Byte vector which will receive the decoded opaque value.</param>
            <param name="offset">Start offset in the byte vector.</param>
            <param name="length">the number of bytes to decode.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpDecodingStream.socket">
            <summary>
            The streaming socket to be used when receiving this XDR stream's
            buffer contents.
            </summary>
            <remarks>
            The streaming socket to be used when receiving this XDR stream's
            buffer contents.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpDecodingStream.stream">
            <summary>The input stream used to pull the bytes off the network.</summary>
            <remarks>The input stream used to pull the bytes off the network.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpDecodingStream.buffer">
            <summary>
            The buffer which will be filled from the datagram socket and then
            be used to supply the information when decoding data.
            </summary>
            <remarks>
            The buffer which will be filled from the datagram socket and then
            be used to supply the information when decoding data.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpDecodingStream.bufferIndex">
            <summary>The read pointer is an index into the <code>buffer</code>.</summary>
            <remarks>The read pointer is an index into the <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpDecodingStream.bufferHighmark">
            <summary>
            Index of the last four byte word in the buffer, which has been read
            in from the datagram socket.
            </summary>
            <remarks>
            Index of the last four byte word in the buffer, which has been read
            in from the datagram socket.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpDecodingStream.fragmentLength">
            <summary>Remaining number of bytes in this fragment -- and still to read.</summary>
            <remarks>Remaining number of bytes in this fragment -- and still to read.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpDecodingStream.lastFragment">
            <summary>
            Flag indicating that we've read the last fragment and thus reached
            the end of the record.
            </summary>
            <remarks>
            Flag indicating that we've read the last fragment and thus reached
            the end of the record.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.XdrTcpEncodingStream">
            <summary>
            The <code>XdrTcpEncodingStream</code> class provides the necessary
            functionality to
            <see cref="T:org.acplt.oncrpc.XdrEncodingStream">XdrEncodingStream</see>
            to send XDR records to the
            network using the stream-oriented TCP/IP.
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <version>$Revision: 1.2 $ $Date: 2003/08/14 11:07:39 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Construct a new <code>XdrTcpEncodingStream</code> object and associate
            it with the given <code>streamingSocket</code> for TCP/IP-based
            communication.
            </summary>
            <remarks>
            Construct a new <code>XdrTcpEncodingStream</code> object and associate
            it with the given <code>streamingSocket</code> for TCP/IP-based
            communication.
            </remarks>
            <param name="streamingSocket">Socket to which XDR data is sent.</param>
            <param name="bufferSize">
            Size of packet buffer for temporarily storing
            outgoing XDR data.
            </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.getSenderAddress">
            <summary>Returns the Internet address of the sender of the current XDR data.</summary>
            <remarks>
            Returns the Internet address of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrTcpEncodingStream.beginEncoding(System.Net.IPAddress,System.Int32)">beginEncoding(IPAddress, int)
            	</see>
            ,
            otherwise it might return stale information.
            </remarks>
            <returns>InetAddress of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.getSenderPort">
            <summary>Returns the port number of the sender of the current XDR data.</summary>
            <remarks>
            Returns the port number of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrTcpEncodingStream.beginEncoding(System.Net.IPAddress,System.Int32)">beginEncoding(IPAddress, int)
            	</see>
            ,
            otherwise it might return stale information.
            </remarks>
            <returns>Port number of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.beginEncoding(System.Net.IPAddress,System.Int32)">
            <summary>Begins encoding a new XDR record.</summary>
            <remarks>
            Begins encoding a new XDR record. This typically involves resetting this
            encoding XDR stream back into a known state.
            </remarks>
            <param name="receiverAddress">
            Indicates the receiver of the XDR data. This can be
            <code>null</code> for XDR streams connected permanently to a
            receiver (like in case of TCP/IP based XDR streams).
            </param>
            <param name="receiverPort">Port number of the receiver.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.endEncoding">
            <summary>
            Flushes this encoding XDR stream and forces any buffered output bytes
            to be written out.
            </summary>
            <remarks>
            Flushes this encoding XDR stream and forces any buffered output bytes
            to be written out. The general contract of <code>endEncoding</code> is that
            calling it is an indication that the current record is finished and any
            bytes previously encoded should immediately be written to their intended
            destination.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.endEncoding(System.Boolean)">
            <summary>Ends the current record fort this encoding XDR stream.</summary>
            <remarks>
            Ends the current record fort this encoding XDR stream. If the parameter
            <code>flush</code> is <code>true</code> any buffered output bytes are
            immediately written to their intended destination. If <code>flush</code>
            is <code>false</code>, then more than one record can be pipelined, for
            instance, to batch several ONC/RPC calls. In this case the ONC/RPC
            server <b>must not</b> send a reply (with the exception for the last
            call in a batch, which might be trigger a reply). Otherwise, you will
            most probably cause an interaction deadlock between client and server.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.flush(System.Boolean,System.Boolean)">
            <summary>
            Flushes the current contents of the buffer as one fragment to the
            network.
            </summary>
            <remarks>
            Flushes the current contents of the buffer as one fragment to the
            network.
            </remarks>
            <param name="lastFragment">
            <code>true</code> if this is the last fragment of
            the current XDR record.
            </param>
            <param name="batch">
            if last fragment and <code>batch</code> is
            <code>true</code>, then the buffer is not flushed to the network
            but instead we wait for more records to be encoded.
            </param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.Close">
            <summary>
            Closes this encoding XDR stream and releases any system resources
            associated with this stream.
            </summary>
            <remarks>
            Closes this encoding XDR stream and releases any system resources
            associated with this stream. The general contract of <code>close</code>
            is that it closes the encoding XDR stream. A closed XDR stream cannot
            perform encoding operations and cannot be reopened.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.xdrEncodeInt(System.Int32)">
            <summary>
            Encodes (aka "serializes") a "XDR int" value and writes it down a
            XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a "XDR int" value and writes it down a
            XDR stream. A XDR int is 32 bits wide -- the same width Java's "int"
            data type has. This method is one of the basic methods all other
            methods can rely on.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrTcpEncodingStream.xdrEncodeOpaque(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>.
            </summary>
            <remarks>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>. Only the opaque value is encoded, but
            no length indication is preceeding the opaque value, so the receiver
            has to know how long the opaque value will be. The encoded data is
            always padded to be a multiple of four. If the given length is not a
            multiple of four, zero bytes will be used for padding.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpEncodingStream.socket">
            <summary>
            The streaming socket to be used when receiving this XDR stream's
            buffer contents.
            </summary>
            <remarks>
            The streaming socket to be used when receiving this XDR stream's
            buffer contents.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpEncodingStream.stream">
            <summary>The output stream used to get rid of bytes going off to the network.</summary>
            <remarks>The output stream used to get rid of bytes going off to the network.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpEncodingStream.buffer">
            <summary>
            The buffer which will be filled from the datagram socket and then
            be used to supply the information when decoding data.
            </summary>
            <remarks>
            The buffer which will be filled from the datagram socket and then
            be used to supply the information when decoding data.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpEncodingStream.bufferIndex">
            <summary>The write pointer is an index into the <code>buffer</code>.</summary>
            <remarks>The write pointer is an index into the <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpEncodingStream.bufferHighmark">
            <summary>Index of the last four byte word in the <code>buffer</code>.</summary>
            <remarks>Index of the last four byte word in the <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpEncodingStream.bufferFragmentHeaderIndex">
            <summary>Index of fragment header within <code>buffer</code>.</summary>
            <remarks>Index of fragment header within <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrTcpEncodingStream.paddingZeros">
            <summary>Some zeros, only needed for padding -- like in real life.</summary>
            <remarks>Some zeros, only needed for padding -- like in real life.</remarks>
        </member>
        <member name="T:org.acplt.oncrpc.XdrUdpDecodingStream">
            <summary>
            The <code>XdrUdpDecodingStream</code> class provides the necessary
            functionality to
            <see cref="T:org.acplt.oncrpc.XdrDecodingStream">XdrDecodingStream</see>
            to receive XDR packets from the
            network using the datagram-oriented UDP/IP.
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <version>$Revision: 1.2 $ $Date: 2005/11/11 21:07:40 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpDecodingStream.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Construct a new <code>XdrUdpDecodingStream</code> object and associate
            it with the given <code>datagramSocket</code> for UDP/IP-based
            communication.
            </summary>
            <remarks>
            Construct a new <code>XdrUdpDecodingStream</code> object and associate
            it with the given <code>datagramSocket</code> for UDP/IP-based
            communication. This constructor is typically used when communicating
            with servers over UDP/IP using a "connected" datagram socket.
            </remarks>
            <param name="datagramSocket">Datagram socket from which XDR data is received.</param>
            <param name="bufferSize">
            Size of packet buffer for storing received XDR
            datagrams.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpDecodingStream.getSenderAddress">
            <summary>Returns the Internet address of the sender of the current XDR data.</summary>
            <remarks>
            Returns the Internet address of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrUdpDecodingStream.beginDecoding">beginDecoding()</see>
            ,
            otherwise it might return stale information.
            </remarks>
            <returns>InetAddress of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpDecodingStream.getSenderPort">
            <summary>Returns the port number of the sender of the current XDR data.</summary>
            <remarks>
            Returns the port number of the sender of the current XDR data.
            This method should only be called after
            <see cref="M:org.acplt.oncrpc.XdrUdpDecodingStream.beginDecoding">beginDecoding()</see>
            ,
            otherwise it might return stale information.
            </remarks>
            <returns>Port number of the sender of the current XDR data.</returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpDecodingStream.beginDecoding">
            <summary>Initiates decoding of the next XDR record.</summary>
            <remarks>
            Initiates decoding of the next XDR record. For UDP-based XDR decoding
            streams this reads in the next datagram from the network socket.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrUdpDecodingStream.endDecoding" -->
        <!-- Badly formed XML comment ignored for member "M:org.acplt.oncrpc.XdrUdpDecodingStream.Close" -->
        <member name="M:org.acplt.oncrpc.XdrUdpDecodingStream.xdrDecodeInt">
            <summary>
            Decodes (aka "deserializes") a "XDR int" value received from a
            XDR stream.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a "XDR int" value received from a
            XDR stream. A XDR int is 32 bits wide -- the same width Java's "int"
            data type has.
            </remarks>
            <returns>The decoded int value.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpDecodingStream.xdrDecodeOpaque(System.Int32)">
            <summary>
            Decodes (aka "deserializes") an opaque value, which is nothing more
            than a series of octets (or 8 bits wide bytes).
            </summary>
            <remarks>
            Decodes (aka "deserializes") an opaque value, which is nothing more
            than a series of octets (or 8 bits wide bytes). Because the length
            of the opaque value is given, we don't need to retrieve it from the
            XDR stream. This is different from
            <see cref="M:org.acplt.oncrpc.XdrUdpDecodingStream.xdrDecodeOpaque(System.Byte[],System.Int32,System.Int32)">xdrDecodeOpaque(byte[], int, int)</see>
            where
            first the length of the opaque value is retrieved from the XDR stream.
            </remarks>
            <param name="length">Length of opaque data to decode.</param>
            <returns>Opaque data as a byte vector.</returns>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpDecodingStream.xdrDecodeOpaque(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>.
            </summary>
            <remarks>
            Decodes (aka "deserializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>. Only the opaque value is decoded, so the
            caller has to know how long the opaque value will be. The decoded data
            is always padded to be a multiple of four (because that's what the
            sender does).
            </remarks>
            <param name="opaque">Byte vector which will receive the decoded opaque value.</param>
            <param name="offset">Start offset in the byte vector.</param>
            <param name="length">the number of bytes to decode.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpDecodingStream.socket">
            <summary>
            The datagram socket to be used when receiving this XDR stream's
            buffer contents.
            </summary>
            <remarks>
            The datagram socket to be used when receiving this XDR stream's
            buffer contents.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpDecodingStream.senderAddress">
            <summary>Sender's address of current buffer contents.</summary>
            <remarks>Sender's address of current buffer contents.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpDecodingStream.senderPort">
            <summary>The senders's port.</summary>
            <remarks>The senders's port.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpDecodingStream.buffer">
            <summary>
            The buffer which will be filled from the datagram socket and then
            be used to supply the information when decoding data.
            </summary>
            <remarks>
            The buffer which will be filled from the datagram socket and then
            be used to supply the information when decoding data.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpDecodingStream.bufferIndex">
            <summary>The read pointer is an index into the <code>buffer</code>.</summary>
            <remarks>The read pointer is an index into the <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpDecodingStream.bufferHighmark">
            <summary>
            Index of the last four byte word in the buffer, which has been read
            in from the datagram socket.
            </summary>
            <remarks>
            Index of the last four byte word in the buffer, which has been read
            in from the datagram socket.
            </remarks>
        </member>
        <member name="T:org.acplt.oncrpc.XdrUdpEncodingStream">
            <summary>
            The <code>XdrUdpDecodingStream</code> class provides the necessary
            functionality to
            <see cref="T:org.acplt.oncrpc.XdrDecodingStream">XdrDecodingStream</see>
            to send XDR packets over the
            network using the datagram-oriented UDP/IP.
            Converted to C# using the db4o Sharpen tool.
            </summary>
            <version>$Revision: 1.2 $ $Date: 2003/08/14 11:07:39 $ $State: Exp $ $Locker:  $</version>
            <author>Harald Albrecht</author>
            <author>Jay Walters</author>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpEncodingStream.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Creates a new UDP-based encoding XDR stream, associated with the
            given datagram socket.
            </summary>
            <remarks>
            Creates a new UDP-based encoding XDR stream, associated with the
            given datagram socket.
            </remarks>
            <param name="datagramSocket">
            Datagram-based socket to use to get rid of
            encoded data.
            </param>
            <param name="bufferSize">
            Size of buffer to store encoded data before it
            is sent as one datagram.
            </param>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpEncodingStream.beginEncoding(System.Net.IPAddress,System.Int32)">
            <summary>Begins encoding a new XDR record.</summary>
            <remarks>
            Begins encoding a new XDR record. This involves resetting this
            encoding XDR stream back into a known state.
            </remarks>
            <param name="receiverAddress">
            Indicates the receiver of the XDR data. This can be
            <code>null</code> for XDR streams connected permanently to a
            receiver (like in case of TCP/IP based XDR streams).
            </param>
            <param name="receiverPort">Port number of the receiver.</param>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpEncodingStream.endEncoding">
            <summary>
            Flushes this encoding XDR stream and forces any buffered output bytes
            to be written out.
            </summary>
            <remarks>
            Flushes this encoding XDR stream and forces any buffered output bytes
            to be written out. The general contract of <code>endEncoding</code> is that
            calling it is an indication that the current record is finished and any
            bytes previously encoded should immediately be written to their intended
            destination.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpEncodingStream.Close">
            <summary>
            Closes this encoding XDR stream and releases any system resources
            associated with this stream.
            </summary>
            <remarks>
            Closes this encoding XDR stream and releases any system resources
            associated with this stream. The general contract of <code>close</code>
            is that it closes the encoding XDR stream. A closed XDR stream cannot
            perform encoding operations and cannot be reopened.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpEncodingStream.xdrEncodeInt(System.Int32)">
            <summary>
            Encodes (aka "serializes") a "XDR int" value and writes it down a
            XDR stream.
            </summary>
            <remarks>
            Encodes (aka "serializes") a "XDR int" value and writes it down a
            XDR stream. A XDR int is 32 bits wide -- the same width Java's "int"
            data type has. This method is one of the basic methods all other
            methods can rely on.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUdpEncodingStream.xdrEncodeOpaque(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>.
            </summary>
            <remarks>
            Encodes (aka "serializes") a XDR opaque value, which is represented
            by a vector of byte values, and starts at <code>offset</code> with a
            length of <code>length</code>. Only the opaque value is encoded, but
            no length indication is preceeding the opaque value, so the receiver
            has to know how long the opaque value will be. The encoded data is
            always padded to be a multiple of four. If the given length is not a
            multiple of four, zero bytes will be used for padding.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpEncodingStream.socket">
            <summary>
            The datagram socket to be used when sending this XDR stream's
            buffer contents.
            </summary>
            <remarks>
            The datagram socket to be used when sending this XDR stream's
            buffer contents.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpEncodingStream.receiverAddress">
            <summary>Receiver address of current buffer contents when flushed.</summary>
            <remarks>Receiver address of current buffer contents when flushed.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpEncodingStream.receiverPort">
            <summary>The receiver's port.</summary>
            <remarks>The receiver's port.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpEncodingStream.buffer">
            <summary>
            The buffer which will receive the encoded information, before it
            is sent via a datagram socket.
            </summary>
            <remarks>
            The buffer which will receive the encoded information, before it
            is sent via a datagram socket.
            </remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpEncodingStream.bufferIndex">
            <summary>The write pointer is an index into the <code>buffer</code>.</summary>
            <remarks>The write pointer is an index into the <code>buffer</code>.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpEncodingStream.bufferHighmark">
            <summary>Index of the last four byte word in the buffer.</summary>
            <remarks>Index of the last four byte word in the buffer.</remarks>
        </member>
        <member name="F:org.acplt.oncrpc.XdrUdpEncodingStream.paddingZeros">
            <summary>Some zeros, only needed for padding -- like in real life.</summary>
            <remarks>Some zeros, only needed for padding -- like in real life.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrUnion" -->
        <member name="M:org.acplt.oncrpc.XdrUnion.getXdrTypeCode">
            <summary>
            Returns the so-called type code which identifies a derived class when
            encoded or decoded.
            </summary>
            <remarks>
            Returns the so-called type code which identifies a derived class when
            encoded or decoded. Note that the type code is not globally unique, but
            rather it is only unique within the derived classes of a direct descend
            of XdrUnion. If <code>foo</code> is derived from <code>XdrUnion</code>
            and <code>foo</code> is the base class for <code>bar</code> and
            <code>baz</code>, then the type code needs only be unique between
            <code>bar</code> and <code>baz</code>.
            </remarks>
            <returns>
            Type code identifying an object's class when encoding or
            decoding the object into or from a XDR stream.
            </returns>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUnion.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- an object into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- an object into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUnion.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- an object from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- an object from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUnion.xdrEncodeCommon(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- the common part of an object into
            a XDR stream in compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- the common part of an object into
            a XDR stream in compliance to RFC 1832. Note that the common part is
            deserialized after the variant part.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUnion.xdrDecodeCommon(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- the common part of an object from
            a XDR stream in compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- the common part of an object from
            a XDR stream in compliance to RFC 1832. Note that the common part is
            deserialized after the variant part.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUnion.xdrEncodeVariant(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- the variant part of an object into
            a XDR stream in compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- the variant part of an object into
            a XDR stream in compliance to RFC 1832. Note that the variant part is
            deserialized before the common part.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrUnion.xdrDecodeVariant(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- the variant part of an object from
            a XDR stream in compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- the variant part of an object from
            a XDR stream in compliance to RFC 1832. Note that the variant part is
            deserialized before the common part.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:org.acplt.oncrpc.XdrVoid" -->
        <member name="M:org.acplt.oncrpc.XdrVoid.xdrEncode(org.acplt.oncrpc.XdrEncodingStream)">
            <summary>
            Encodes -- that is: serializes -- a void into a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Encodes -- that is: serializes -- a void into a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="M:org.acplt.oncrpc.XdrVoid.xdrDecode(org.acplt.oncrpc.XdrDecodingStream)">
            <summary>
            Decodes -- that is: deserializes -- a void from a XDR stream in
            compliance to RFC 1832.
            </summary>
            <remarks>
            Decodes -- that is: deserializes -- a void from a XDR stream in
            compliance to RFC 1832.
            </remarks>
            <exception cref="T:org.acplt.oncrpc.OncRpcException">if an ONC/RPC error occurs.</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <exception cref="T:org.acplt.oncrpc.OncRpcException"></exception>
        </member>
        <member name="F:org.acplt.oncrpc.XdrVoid.XDR_VOID">
            <summary>
            Static <code>XdrVoid</code> instance, which can be used in cases
            where no data is to be serialized or deserialized but some ONC/RPC
            function expects a reference to a XDR-able object.
            </summary>
            <remarks>
            Static <code>XdrVoid</code> instance, which can be used in cases
            where no data is to be serialized or deserialized but some ONC/RPC
            function expects a reference to a XDR-able object.
            </remarks>
        </member>
    </members>
</doc>

/*
 * Automatically generated by jrpcgen 1.0.7 on 4/29/2014
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
using org.acplt.oncrpc;

using System.Net;

/**
 * The class <code>missileClient</code> implements the client stub proxy
 * for the MISSILE remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class missileClient : OncRpcClientStub {

    /**
     * Constructs a <code>missileClient</code> client stub proxy object
     * from which the MISSILE remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public missileClient(IPAddress host, int protocol) :         base(host, missile.MISSILE, 1, 0, protocol) {
    }

    /**
     * Constructs a <code>missileClient</code> client stub proxy object
     * from which the MISSILE remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public missileClient(IPAddress host, int port, int protocol) :        base(host, missile.MISSILE, 1, port, protocol) {
    }

    /**
     * Constructs a <code>missileClient</code> client stub proxy object
     * from which the MISSILE remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public missileClient(OncRpcClient client) : base(client) {
    }

    /**
     * Constructs a <code>missileClient</code> client stub proxy object
     * from which the MISSILE remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public missileClient(IPAddress host, int program, int version, int protocol) :        base(host, program, version, 0, protocol) {
    }

    /**
     * Constructs a <code>missileClient</code> client stub proxy object
     * from which the MISSILE remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public missileClient(IPAddress host, int program, int version, int port, int protocol) :        base(host, program, version, port, protocol) {
    }

    /**
     * Call remote procedure missile_command_1.
     * @param cmd parameter (of type int) to the remote procedure call.
     * @return Result from remote procedure call (of type int).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int missile_command_1(int cmd) {
        XdrInt args_ = new XdrInt(cmd);
        XdrInt result_ = new XdrInt();
        client.call(missile.missile_command_1, missile.MISSILE_VERS, args_, result_);
        return result_.intValue();
    }

}
// End of missileClient.cs

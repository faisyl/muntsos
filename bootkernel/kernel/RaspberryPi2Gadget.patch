--- Makefile.orig	2020-09-30 14:37:00.000000000 -0700
+++ Makefile	2020-10-01 10:04:02.509714288 -0700
@@ -1356,7 +1356,6 @@
 	fi
 	@sed 's:^:kernel/:' modules.order > $(MODLIB)/modules.order
 	@sed 's:^:kernel/:' modules.builtin > $(MODLIB)/modules.builtin
-	@cp -f $(objtree)/modules.builtin.modinfo $(MODLIB)/
 	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst
 
 # This depmod is only for convenience to give the initial
--- arch/arm/Kconfig.orig	2020-10-02 07:46:16.000000000 -0700
+++ arch/arm/Kconfig	2020-10-06 20:57:37.952885452 -0700
@@ -89,11 +89,6 @@
 	select HAVE_HW_BREAKPOINT if PERF_EVENTS && (CPU_V6 || CPU_V6K || CPU_V7)
 	select HAVE_IDE if PCI || ISA || PCMCIA
 	select HAVE_IRQ_TIME_ACCOUNTING
-	select HAVE_KERNEL_GZIP
-	select HAVE_KERNEL_LZ4
-	select HAVE_KERNEL_LZMA
-	select HAVE_KERNEL_LZO
-	select HAVE_KERNEL_XZ
 	select HAVE_KPROBES if !XIP_KERNEL && !CPU_ENDIAN_BE32 && !CPU_V7M
 	select HAVE_KRETPROBES if HAVE_KPROBES
 	select HAVE_MOD_ARCH_SPECIFIC
--- drivers/usb/gadget/legacy/hid.c.orig	2018-12-14 19:11:00.000000000 +0100
+++ drivers/usb/gadget/legacy/hid.c	2019-01-14 09:45:47.789780753 +0100
@@ -267,6 +267,48 @@
 	},
 };
 
+/* Additional goop to define a USB raw HID gadget */
+
+static struct hidg_func_descriptor raw_hid_data = {
+        .subclass               = 0, /* No subclass */
+        .protocol               = 0, /* No protocol */
+        .report_length          = 64,
+        .report_desc_length     = 33,
+        .report_desc            = {
+0x06, 0x00, 0xFF, // Usage Page = 0xFF00 (Vendor Defined Page 1)
+0x09, 0x01,       // Usage (Vendor Usage 1)
+0xA1, 0x01,       // Collection (Application)
+// Input report
+0x19, 0x01,       // Usage Minimum
+0x29, 0x40,       // Usage Maximum
+0x15, 0x00,       // Logical Minimum
+0x26, 0xFF, 0x00, // Logical Maximum
+0x75, 0x08,       // Report Size: 8-bit field size
+0x95, 64,         // Report Count
+0x81, 0x02,       // Input (Data, Array, Abs)
+// Output report
+0x19, 0x01,       // Usage Minimum
+0x29, 0x40,       // Usage Maximum
+0x75, 0x08,       // Report Size: 8-bit field size
+0x95, 64,         // Report Count
+0x91, 0x02,       // Output (Data, Array, Abs)
+0xC0              // End Collection
+        }
+};
+
+static struct platform_device raw_hid = {
+        .name                   = "hidg",
+        .id                     = 0,
+        .num_resources          = 0,
+        .resource               = 0,
+        .dev.platform_data      = &raw_hid_data,
+};
+
+int __init init_raw_hid(void)
+{
+	pr_info("g_hid: loading raw HID descriptor\n");
+	return platform_device_register(&raw_hid);
+}
 
 MODULE_DESCRIPTION(DRIVER_DESC);
 MODULE_AUTHOR("Fabien Chouteau, Peter Korsgaard");
@@ -276,6 +318,8 @@
 {
 	int status;
 
+	init_raw_hid();
+
 	status = platform_driver_probe(&hidg_plat_driver,
 				hidg_plat_driver_probe);
 	if (status < 0)
--- drivers/usb/dwc2/gadget.c.orig	2020-07-24 15:47:31.467144347 -0700
+++ drivers/usb/dwc2/gadget.c	2020-07-24 15:54:47.949292864 -0700
@@ -3359,6 +3359,8 @@
 	usbcfg &= ~GUSBCFG_TOUTCAL_MASK;
 	usbcfg |= GUSBCFG_TOUTCAL(7);
 
+        usbcfg |= GUSBCFG_FORCEDEVMODE;
+
 	/* remove the HNP/SRP and set the PHY */
 	usbcfg &= ~(GUSBCFG_SRPCAP | GUSBCFG_HNPCAP);
         dwc2_writel(hsotg, usbcfg, GUSBCFG);

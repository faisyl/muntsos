--- arch/arm/boot/dts/am335x-bone.dts.orig	2021-04-06 11:03:57.556034015 -0700
+++ arch/arm/boot/dts/am335x-bone.dts	2021-04-06 11:06:31.358017995 -0700
@@ -6,6 +6,7 @@
 
 #include "am33xx.dtsi"
 #include "am335x-bone-common.dtsi"
+#include "am335x-bone-common-no-capemgr.dtsi"
 
 / {
 	model = "TI AM335x BeagleBone";
--- arch/arm/boot/dts/am335x-boneblack.dts.orig	2021-03-31 08:53:47.000000000 -0700
+++ arch/arm/boot/dts/am335x-boneblack.dts	2021-04-06 10:52:19.479029238 -0700
@@ -5,7 +5,7 @@
 /dts-v1/;
 
 #include "am33xx.dtsi"
-#include "am335x-bone-common.dtsi"
+#include "am335x-bone-common-no-capemgr.dtsi"
 #include "am335x-boneblack-common.dtsi"
 
 / {
--- arch/arm/boot/dts/am335x-boneblack-wireless.dts.orig	2021-03-31 08:53:47.000000000 -0700
+++ arch/arm/boot/dts/am335x-boneblack-wireless.dts	2021-04-06 10:52:19.483029291 -0700
@@ -5,7 +5,7 @@
 /dts-v1/;
 
 #include "am33xx.dtsi"
-#include "am335x-bone-common.dtsi"
+#include "am335x-bone-common-no-capemgr.dtsi"
 #include "am335x-boneblack-common.dtsi"
 #include <dt-bindings/interrupt-controller/irq.h>
 
--- arch/arm/boot/dts/am335x-bonegreen.dts.orig	2021-03-31 08:53:47.000000000 -0700
+++ arch/arm/boot/dts/am335x-bonegreen.dts	2021-04-06 10:52:19.487029342 -0700
@@ -5,7 +5,7 @@
 /dts-v1/;
 
 #include "am33xx.dtsi"
-#include "am335x-bone-common.dtsi"
+#include "am335x-bone-common-no-capemgr.dtsi"
 #include "am335x-bonegreen-common.dtsi"
 
 / {
--- arch/arm/boot/dts/am335x-bonegreen-wireless.dts.orig	2021-03-31 08:53:47.000000000 -0700
+++ arch/arm/boot/dts/am335x-bonegreen-wireless.dts	2021-04-06 10:52:19.491029393 -0700
@@ -5,7 +5,7 @@
 /dts-v1/;
 
 #include "am33xx.dtsi"
-#include "am335x-bone-common.dtsi"
+#include "am335x-bone-common-no-capemgr.dtsi"
 #include "am335x-bonegreen-common.dtsi"
 #include <dt-bindings/interrupt-controller/irq.h>
 
--- drivers/usb/gadget/legacy/hid.c.orig	2021-03-31 08:53:47.000000000 -0700
+++ drivers/usb/gadget/legacy/hid.c	2021-04-06 10:52:19.495029445 -0700
@@ -267,6 +267,48 @@
 	},
 };
 
+/* Additional goop to define a USB raw HID gadget */
+
+static struct hidg_func_descriptor raw_hid_data = {
+        .subclass               = 0, /* No subclass */
+        .protocol               = 0, /* No protocol */
+        .report_length          = 64,
+        .report_desc_length     = 33,
+        .report_desc            = {
+0x06, 0x00, 0xFF, // Usage Page = 0xFF00 (Vendor Defined Page 1)
+0x09, 0x01,       // Usage (Vendor Usage 1)
+0xA1, 0x01,       // Collection (Application)
+// Input report
+0x19, 0x01,       // Usage Minimum
+0x29, 0x40,       // Usage Maximum
+0x15, 0x00,       // Logical Minimum
+0x26, 0xFF, 0x00, // Logical Maximum
+0x75, 0x08,       // Report Size: 8-bit field size
+0x95, 64,         // Report Count
+0x81, 0x02,       // Input (Data, Array, Abs)
+// Output report
+0x19, 0x01,       // Usage Minimum
+0x29, 0x40,       // Usage Maximum
+0x75, 0x08,       // Report Size: 8-bit field size
+0x95, 64,         // Report Count
+0x91, 0x02,       // Output (Data, Array, Abs)
+0xC0              // End Collection
+        }
+};
+
+static struct platform_device raw_hid = {
+        .name                   = "hidg",
+        .id                     = 0,
+        .num_resources          = 0,
+        .resource               = 0,
+        .dev.platform_data      = &raw_hid_data,
+};
+
+int __init init_raw_hid(void)
+{
+	pr_info("g_hid: loading raw HID descriptor\n");
+	return platform_device_register(&raw_hid);
+}
 
 MODULE_DESCRIPTION(DRIVER_DESC);
 MODULE_AUTHOR("Fabien Chouteau, Peter Korsgaard");
@@ -276,6 +318,8 @@
 {
 	int status;
 
+	init_raw_hid();
+
 	status = platform_driver_probe(&hidg_plat_driver,
 				hidg_plat_driver_probe);
 	if (status < 0)
--- net/wireless/Kconfig.orig	2021-03-31 08:53:47.000000000 -0700
+++ net/wireless/Kconfig	2021-04-06 10:52:19.495029445 -0700
@@ -4,7 +4,8 @@
 
 config WEXT_CORE
 	def_bool y
-	depends on CFG80211_WEXT || WIRELESS_EXT
+	select WEXT_PRIV
+	select WIRELESS_EXT
 
 config WEXT_PROC
 	def_bool y

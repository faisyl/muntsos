--- arch/arm/boot/dts/overlays/overlay_map.dts.orig	2024-01-20 20:41:23.975798406 -0800
+++ arch/arm/boot/dts/overlays/overlay_map.dts	2024-01-20 20:45:03.158771680 -0800
@@ -38,6 +38,14 @@
 		bcm2711;
 	};
 
+	disable-ethernet {
+		bcm2711 = "disable-ethernet-pi4";
+	};
+
+	disable-ethernet-pi4 {
+		bcm2711;
+	};
+
 	disable-wifi {
 		bcm2835;
 		bcm2711;
--- drivers/clk/bcm/clk-raspberrypi.c.orig	2023-12-23 09:43:27.536046553 -0800
+++ drivers/clk/bcm/clk-raspberrypi.c	2023-12-23 09:44:47.945092107 -0800
@@ -373,7 +373,7 @@
 		struct raspberrypi_clk_variant *variant;
 
 		if (clks->id >= RPI_FIRMWARE_NUM_CLK_ID) {
-			dev_err(rpi->dev, "Unknown clock id: %u (max: %u)\n",
+			dev_warn(rpi->dev, "Unknown clock id: %u (max: %u)\n",
 					   clks->id, RPI_FIRMWARE_NUM_CLK_ID - 1);
 			return -EINVAL;
 		}
--- drivers/pci/controller/pcie-brcmstb.c.orig	2024-01-20 18:23:41.109799141 -0800
+++ drivers/pci/controller/pcie-brcmstb.c	2024-01-20 18:24:44.822663425 -0800
@@ -1428,7 +1428,7 @@
 		msleep(5);
 
 	if (!brcm_pcie_link_up(pcie)) {
-		dev_err(dev, "link down\n");
+		dev_warn(dev, "link down\n");
 		return -ENODEV;
 	}
 
--- fs/super.c.orig	2023-12-21 06:06:09.000000000 -0800
+++ fs/super.c	2023-12-23 09:43:27.536046553 -0800
@@ -1302,7 +1302,7 @@
 
 	bdev = blkdev_get_by_path(fc->source, mode, fc->fs_type);
 	if (IS_ERR(bdev)) {
-		errorf(fc, "%s: Can't open blockdev", fc->source);
+		warnf(fc, "%s: Can't open blockdev", fc->source);
 		return PTR_ERR(bdev);
 	}
 
--- drivers/usb/gadget/legacy/hid.c.orig	2023-12-21 06:06:09.000000000 -0800
+++ drivers/usb/gadget/legacy/hid.c	2023-12-30 22:46:36.890003319 -0800
@@ -272,6 +272,48 @@
 	},
 };
 
+/* Additional goop to define a USB raw HID gadget */
+
+static struct hidg_func_descriptor raw_hid_data = {
+        .subclass               = 0, /* No subclass */
+        .protocol               = 0, /* No protocol */
+        .report_length          = 64,
+        .report_desc_length     = 33,
+        .report_desc            = {
+0x06, 0x00, 0xFF, // Usage Page = 0xFF00 (Vendor Defined Page 1)
+0x09, 0x01,       // Usage (Vendor Usage 1)
+0xA1, 0x01,       // Collection (Application)
+// Input report
+0x19, 0x01,       // Usage Minimum
+0x29, 0x40,       // Usage Maximum
+0x15, 0x00,       // Logical Minimum
+0x26, 0xFF, 0x00, // Logical Maximum
+0x75, 0x08,       // Report Size: 8-bit field size
+0x95, 64,         // Report Count
+0x81, 0x02,       // Input (Data, Array, Abs)
+// Output report
+0x19, 0x01,       // Usage Minimum
+0x29, 0x40,       // Usage Maximum
+0x75, 0x08,       // Report Size: 8-bit field size
+0x95, 64,         // Report Count
+0x91, 0x02,       // Output (Data, Array, Abs)
+0xC0              // End Collection
+        }
+};
+
+static struct platform_device raw_hid = {
+        .name                   = "hidg",
+        .id                     = 0,
+        .num_resources          = 0,
+        .resource               = 0,
+        .dev.platform_data      = &raw_hid_data,
+};
+
+int __init init_raw_hid(void)
+{
+	pr_info("g_hid: loading raw HID descriptor\n");
+	return platform_device_register(&raw_hid);
+}
 
 MODULE_DESCRIPTION(DRIVER_DESC);
 MODULE_AUTHOR("Fabien Chouteau, Peter Korsgaard");
@@ -281,6 +323,8 @@
 {
 	int status;
 
+	init_raw_hid();
+
 	status = platform_driver_probe(&hidg_plat_driver,
 				hidg_plat_driver_probe);
 	if (status < 0)
